{"version":3,"sources":["../src/index.ts","../src/coders/input.ts","../src/coders/byte-array.ts","../src/coders/utxo-id.ts","../src/coders/output.ts","../src/coders/receipt.ts","../src/coders/storage-slot.ts","../src/coders/transaction.ts","../src/coders/witness.ts","../src/consts.ts"],"sourcesContent":["export * from './coders/input';\nexport * from './coders/output';\nexport * from './coders/receipt';\nexport * from './coders/storage-slot';\nexport * from './coders/transaction';\nexport * from './coders/witness';\nexport * from './coders/utxo-id';\nexport * from './consts';\n","/* eslint-disable max-classes-per-file */\n\nimport { concat } from '@ethersproject/bytes';\nimport { Coder, B256Coder, NumberCoder } from '@fuel-ts/abi-coder';\n\nimport { ByteArrayCoder } from './byte-array';\nimport type { UtxoId } from './utxo-id';\nimport { UtxoIdCoder } from './utxo-id';\n\nexport enum InputType /* u8 */ {\n  Coin = 0,\n  Contract = 1,\n}\n\nexport type InputCoin = {\n  type: InputType.Coin;\n  /** UTXO ID (UtxoId) */\n  utxoID: UtxoId;\n  /** Owning address or script hash (b256) */\n  owner: string;\n  /** Amount of coins (u64) */\n  amount: bigint;\n  /** Asset ID of the coins (b256) */\n  assetId: string;\n  /** Index of witness that authorizes spending the coin (u8) */\n  witnessIndex: number;\n  /** UTXO being spent must have been created at least this many blocks ago (u64) */\n  maturity: bigint;\n  /** Length of predicate, in instructions (u16) */\n  predicateLength: number;\n  /** Length of predicate input data, in bytes (u16) */\n  predicateDataLength: number;\n  /** Predicate bytecode (byte[]) */\n  predicate: string;\n  /** Predicate input data (parameters) (byte[]) */\n  predicateData: string;\n};\n\nexport class InputCoinCoder extends Coder<InputCoin, InputCoin> {\n  constructor() {\n    super('InputCoin', 'struct InputCoin', 0);\n  }\n\n  encode(value: InputCoin): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new UtxoIdCoder().encode(value.utxoID));\n    parts.push(new B256Coder().encode(value.owner));\n    parts.push(new NumberCoder('u64').encode(value.amount));\n    parts.push(new B256Coder().encode(value.assetId));\n    parts.push(new NumberCoder('u8').encode(value.witnessIndex));\n    parts.push(new NumberCoder('u64').encode(value.maturity));\n    parts.push(new NumberCoder('u16').encode(value.predicateLength));\n    parts.push(new NumberCoder('u16').encode(value.predicateDataLength));\n    parts.push(new ByteArrayCoder(value.predicateLength).encode(value.predicate));\n    parts.push(new ByteArrayCoder(value.predicateDataLength).encode(value.predicateData));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [InputCoin, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new UtxoIdCoder().decode(data, o);\n    const utxoID = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const owner = decoded;\n    [decoded, o] = new NumberCoder('u64').decode(data, o);\n    const amount = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const assetId = decoded;\n    [decoded, o] = new NumberCoder('u8').decode(data, o);\n    const witnessIndex = Number(decoded);\n    [decoded, o] = new NumberCoder('u64').decode(data, o);\n    const maturity = decoded;\n    [decoded, o] = new NumberCoder('u16').decode(data, o);\n    [decoded, o] = new NumberCoder('u16').decode(data, o);\n    const predicateLength = decoded;\n    const predicateDataLength = decoded;\n    [decoded, o] = new ByteArrayCoder(predicateLength).decode(data, o);\n    const predicate = decoded;\n    [decoded, o] = new ByteArrayCoder(predicateDataLength).decode(data, o);\n    const predicateData = decoded;\n\n    return [\n      {\n        type: InputType.Coin,\n        utxoID,\n        owner,\n        amount,\n        assetId,\n        witnessIndex,\n        maturity,\n        predicateLength,\n        predicateDataLength,\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        predicate,\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        predicateData,\n      },\n      o,\n    ];\n  }\n}\n\nexport type InputContract = {\n  type: InputType.Contract;\n  /** UTXO ID (UtxoId) */\n  utxoID: UtxoId;\n  /** Root of amount of coins owned by contract before transaction execution (b256) */\n  balanceRoot: string;\n  /** State root of contract before transaction execution (b256) */\n  stateRoot: string;\n  /** Contract ID (b256) */\n  contractID: string;\n};\n\nexport class InputContractCoder extends Coder<InputContract, InputContract> {\n  constructor() {\n    super('InputContract', 'struct InputContract', 0);\n  }\n\n  encode(value: InputContract): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new UtxoIdCoder().encode(value.utxoID));\n    parts.push(new B256Coder().encode(value.balanceRoot));\n    parts.push(new B256Coder().encode(value.stateRoot));\n    parts.push(new B256Coder().encode(value.contractID));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [InputContract, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new UtxoIdCoder().decode(data, o);\n    const utxoID = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const balanceRoot = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const stateRoot = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const contractID = decoded;\n\n    return [\n      {\n        type: InputType.Contract,\n        utxoID,\n        balanceRoot,\n        stateRoot,\n        contractID,\n      },\n      o,\n    ];\n  }\n}\n\nexport type Input = InputCoin | InputContract;\n\nexport class InputCoder extends Coder<Input, Input> {\n  constructor() {\n    super('Input', 'struct Input', 0);\n  }\n\n  encode(value: Input): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new NumberCoder('u8').encode(value.type));\n    switch (value.type) {\n      case InputType.Coin: {\n        parts.push(new InputCoinCoder().encode(value));\n        break;\n      }\n      case InputType.Contract: {\n        parts.push(new InputContractCoder().encode(value));\n        break;\n      }\n      default: {\n        throw new Error('Invalid Input type');\n      }\n    }\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [Input, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new NumberCoder('u8').decode(data, o);\n    const type = decoded as InputType;\n    switch (type) {\n      case InputType.Coin: {\n        [decoded, o] = new InputCoinCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case InputType.Contract: {\n        [decoded, o] = new InputContractCoder().decode(data, o);\n        return [decoded, o];\n      }\n      default: {\n        throw new Error('Invalid Input type');\n      }\n    }\n  }\n}\n","import type { BytesLike } from '@ethersproject/bytes';\nimport { arrayify, concat, hexlify } from '@ethersproject/bytes';\nimport { Coder } from '@fuel-ts/abi-coder';\n\nexport class ByteArrayCoder extends Coder<BytesLike, string> {\n  length: number;\n  #paddingLength: number;\n\n  constructor(length: number) {\n    const paddingLength = (8 - (length % 8)) % 8;\n    const encodedLength = length + paddingLength;\n    super(\n      'ByteArray',\n      // While this might sound like a [u8; N] coder it's actually not.\n      // A [u8; N] coder would pad every u8 to 8 bytes which would\n      // make every u8 have the same size as a u64.\n      // We are packing four u8s into u64s here, avoiding this padding.\n      `[u64; ${encodedLength / 4}]`,\n      encodedLength\n    );\n    this.length = length;\n    this.#paddingLength = paddingLength;\n  }\n\n  encode(value: BytesLike): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    const data = arrayify(value);\n    parts.push(data);\n    // Write padding\n    if (this.#paddingLength) {\n      parts.push(new Uint8Array(this.#paddingLength));\n    }\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [string, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = [hexlify(data.slice(o, o + this.length)), o + this.length];\n    const value = decoded;\n    // Read padding\n    if (this.#paddingLength) {\n      [decoded, o] = [null, o + this.#paddingLength];\n    }\n\n    return [value, o];\n  }\n}\n","import { B256Coder, NumberCoder, StructCoder } from '@fuel-ts/abi-coder';\n\nexport type UtxoId = {\n  /** Transaction ID (b256) */\n  transactionId: string;\n  /** Output index (u8) */\n  outputIndex: number;\n};\n\nexport class UtxoIdCoder extends StructCoder<{\n  transactionId: B256Coder;\n  outputIndex: NumberCoder<'u8'>;\n}> {\n  constructor() {\n    super('UtxoId', {\n      transactionId: new B256Coder(),\n      outputIndex: new NumberCoder('u8'),\n    });\n  }\n}\n","/* eslint-disable max-classes-per-file */\nimport { concat } from '@ethersproject/bytes';\nimport { Coder, B256Coder, NumberCoder } from '@fuel-ts/abi-coder';\n\nexport enum OutputType /* u8 */ {\n  Coin = 0,\n  Contract = 1,\n  Withdrawal = 2,\n  Change = 3,\n  Variable = 4,\n  ContractCreated = 5,\n}\n\nexport type OutputCoin = {\n  type: OutputType.Coin;\n  /** Receiving address or script hash (b256) */\n  to: string;\n  /** Amount of coins to send (u64) */\n  amount: bigint;\n  /** Asset ID of coins (b256) */\n  assetId: string;\n};\n\nexport class OutputCoinCoder extends Coder<OutputCoin, OutputCoin> {\n  constructor() {\n    super('OutputCoin', 'struct OutputCoin', 0);\n  }\n\n  encode(value: OutputCoin): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new B256Coder().encode(value.to));\n    parts.push(new NumberCoder('u64').encode(value.amount));\n    parts.push(new B256Coder().encode(value.assetId));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [OutputCoin, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new B256Coder().decode(data, o);\n    const to = decoded;\n    [decoded, o] = new NumberCoder('u64').decode(data, o);\n    const amount = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const assetId = decoded;\n\n    return [\n      {\n        type: OutputType.Coin,\n        to,\n        amount,\n        assetId,\n      },\n      o,\n    ];\n  }\n}\n\nexport type OutputContract = {\n  type: OutputType.Contract;\n  /** Index of input contract (u8) */\n  inputIndex: number;\n  /** Root of amount of coins owned by contract after transaction execution (b256) */\n  balanceRoot: string;\n  /** State root of contract after transaction execution (b256) */\n  stateRoot: string;\n};\n\nexport class OutputContractCoder extends Coder<OutputContract, OutputContract> {\n  constructor() {\n    super('OutputContract', 'struct OutputContract', 0);\n  }\n\n  encode(value: OutputContract): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new NumberCoder('u8').encode(value.inputIndex));\n    parts.push(new B256Coder().encode(value.balanceRoot));\n    parts.push(new B256Coder().encode(value.stateRoot));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [OutputContract, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new NumberCoder('u8').decode(data, o);\n    const inputIndex = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const balanceRoot = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const stateRoot = decoded;\n\n    return [\n      {\n        type: OutputType.Contract,\n        inputIndex,\n        balanceRoot,\n        stateRoot,\n      },\n      o,\n    ];\n  }\n}\n\nexport type OutputWithdrawal = {\n  type: OutputType.Withdrawal;\n  /** Receiving address (b256) */\n  to: string;\n  /** Amount of coins to withdraw (u64) */\n  amount: bigint;\n  /** Asset ID of coins (b256) */\n  assetId: string;\n};\n\nexport class OutputWithdrawalCoder extends Coder<OutputWithdrawal, OutputWithdrawal> {\n  constructor() {\n    super('OutputWithdrawal', 'struct OutputWithdrawal', 0);\n  }\n\n  encode(value: OutputWithdrawal): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new B256Coder().encode(value.to));\n    parts.push(new NumberCoder('u64').encode(value.amount));\n    parts.push(new B256Coder().encode(value.assetId));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [OutputWithdrawal, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new B256Coder().decode(data, o);\n    const to = decoded;\n    [decoded, o] = new NumberCoder('u64').decode(data, o);\n    const amount = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const assetId = decoded;\n\n    return [\n      {\n        type: OutputType.Withdrawal,\n        to,\n        amount,\n        assetId,\n      },\n      o,\n    ];\n  }\n}\n\nexport type OutputChange = {\n  type: OutputType.Change;\n  /** Receiving address or script hash (b256) */\n  to: string;\n  /** Amount of coins to send (u64) */\n  amount: bigint;\n  /** Asset ID of coins (b256) */\n  assetId: string;\n};\n\nexport class OutputChangeCoder extends Coder<OutputChange, OutputChange> {\n  constructor() {\n    super('OutputChange', 'struct OutputChange', 0);\n  }\n\n  encode(value: OutputChange): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new B256Coder().encode(value.to));\n    parts.push(new NumberCoder('u64').encode(value.amount));\n    parts.push(new B256Coder().encode(value.assetId));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [OutputChange, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new B256Coder().decode(data, o);\n    const to = decoded;\n    [decoded, o] = new NumberCoder('u64').decode(data, o);\n    const amount = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const assetId = decoded;\n\n    return [\n      {\n        type: OutputType.Change,\n        to,\n        amount,\n        assetId,\n      },\n      o,\n    ];\n  }\n}\n\nexport type OutputVariable = {\n  type: OutputType.Variable;\n  /** Receiving address or script hash (b256) */\n  to: string;\n  /** Amount of coins to send (u64) */\n  amount: bigint;\n  /** Asset ID of coins (b256) */\n  assetId: string;\n};\n\nexport class OutputVariableCoder extends Coder<OutputVariable, OutputVariable> {\n  constructor() {\n    super('OutputVariable', 'struct OutputVariable', 0);\n  }\n\n  encode(value: OutputVariable): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new B256Coder().encode(value.to));\n    parts.push(new NumberCoder('u64').encode(value.amount));\n    parts.push(new B256Coder().encode(value.assetId));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [OutputVariable, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new B256Coder().decode(data, o);\n    const to = decoded;\n    [decoded, o] = new NumberCoder('u64').decode(data, o);\n    const amount = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const assetId = decoded;\n\n    return [\n      {\n        type: OutputType.Variable,\n        to,\n        amount,\n        assetId,\n      },\n      o,\n    ];\n  }\n}\n\nexport type OutputContractCreated = {\n  type: OutputType.ContractCreated;\n  /** Contract ID (b256) */\n  contractId: string;\n  /** State root of contract (b256) */\n  stateRoot: string;\n};\n\nexport class OutputContractCreatedCoder extends Coder<\n  OutputContractCreated,\n  OutputContractCreated\n> {\n  constructor() {\n    super('OutputContractCreated', 'struct OutputContractCreated', 0);\n  }\n\n  encode(value: OutputContractCreated): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new B256Coder().encode(value.contractId));\n    parts.push(new B256Coder().encode(value.stateRoot));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [OutputContractCreated, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new B256Coder().decode(data, o);\n    const contractId = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const stateRoot = decoded;\n\n    return [\n      {\n        type: OutputType.ContractCreated,\n        contractId,\n        stateRoot,\n      },\n      o,\n    ];\n  }\n}\n\nexport type Output =\n  | OutputCoin\n  | OutputContract\n  | OutputWithdrawal\n  | OutputChange\n  | OutputVariable\n  | OutputContractCreated;\n\nexport class OutputCoder extends Coder<Output, Output> {\n  constructor() {\n    super('Output', ' struct Output', 0);\n  }\n\n  encode(value: Output): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new NumberCoder('u8').encode(value.type));\n    switch (value.type) {\n      case OutputType.Coin: {\n        parts.push(new OutputCoinCoder().encode(value));\n        break;\n      }\n      case OutputType.Contract: {\n        parts.push(new OutputContractCoder().encode(value));\n        break;\n      }\n      case OutputType.Withdrawal: {\n        parts.push(new OutputWithdrawalCoder().encode(value));\n        break;\n      }\n      case OutputType.Change: {\n        parts.push(new OutputChangeCoder().encode(value));\n        break;\n      }\n      case OutputType.Variable: {\n        parts.push(new OutputVariableCoder().encode(value));\n        break;\n      }\n      case OutputType.ContractCreated: {\n        parts.push(new OutputContractCreatedCoder().encode(value));\n        break;\n      }\n      default: {\n        throw new Error('Invalid Output type');\n      }\n    }\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [Output, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new NumberCoder('u8').decode(data, o);\n    const type = decoded as OutputType;\n    switch (type) {\n      case OutputType.Coin: {\n        [decoded, o] = new OutputCoinCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case OutputType.Contract: {\n        [decoded, o] = new OutputContractCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case OutputType.Withdrawal: {\n        [decoded, o] = new OutputWithdrawalCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case OutputType.Change: {\n        [decoded, o] = new OutputChangeCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case OutputType.Variable: {\n        [decoded, o] = new OutputVariableCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case OutputType.ContractCreated: {\n        [decoded, o] = new OutputContractCreatedCoder().decode(data, o);\n        return [decoded, o];\n      }\n      default: {\n        throw new Error('Invalid Output type');\n      }\n    }\n  }\n}\n","/* eslint-disable max-classes-per-file */\n\nimport { concat } from '@ethersproject/bytes';\nimport { Coder, B256Coder, NumberCoder } from '@fuel-ts/abi-coder';\n\nexport enum ReceiptType /* u8 */ {\n  Call = 0,\n  Return = 1,\n  ReturnData = 2,\n  Panic = 3,\n  Revert = 4,\n  Log = 5,\n  LogData = 6,\n  Transfer = 7,\n  TransferOut = 8,\n  ScriptResult = 9,\n}\n\nexport type ReceiptCall = {\n  type: ReceiptType.Call;\n  /** Contract ID of current context if in an internal context, zero otherwise (b256) */\n  from: string;\n  /** Contract ID of called contract (b256) */\n  to: string;\n  /** Amount of coins to forward, i.e. $rB (u64) */\n  amount: bigint;\n  /** Asset ID of coins to forward, i.e. MEM[$rC, 32] (b256) */\n  assetId: string;\n  /** Gas to forward, i.e. $rD (u64) */\n  gas: bigint;\n  /** First parameter (u64) */\n  param1: bigint;\n  /** Second parameter (u64) */\n  param2: bigint;\n  /** Value of register $pc (u64) */\n  pc: bigint;\n  /** Value of register $is (u64) */\n  is: bigint;\n};\n\nexport class ReceiptCallCoder extends Coder<ReceiptCall, ReceiptCall> {\n  constructor() {\n    super('ReceiptCall', 'struct ReceiptCall', 0);\n  }\n\n  encode(value: ReceiptCall): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new B256Coder().encode(value.from));\n    parts.push(new B256Coder().encode(value.to));\n    parts.push(new NumberCoder('u64').encode(value.amount));\n    parts.push(new B256Coder().encode(value.assetId));\n    parts.push(new NumberCoder('u64').encode(value.gas));\n    parts.push(new NumberCoder('u64').encode(value.param1));\n    parts.push(new NumberCoder('u64').encode(value.param2));\n    parts.push(new NumberCoder('u64').encode(value.pc));\n    parts.push(new NumberCoder('u64').encode(value.is));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [ReceiptCall, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new B256Coder().decode(data, o);\n    const from = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const to = decoded;\n    [decoded, o] = new NumberCoder('u64').decode(data, o);\n    const amount = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const assetId = decoded;\n    [decoded, o] = new NumberCoder('u64').decode(data, o);\n    const gas = decoded;\n    [decoded, o] = new NumberCoder('u64').decode(data, o);\n    const param1 = decoded;\n    [decoded, o] = new NumberCoder('u64').decode(data, o);\n    const param2 = decoded;\n    [decoded, o] = new NumberCoder('u64').decode(data, o);\n    const pc = decoded;\n    [decoded, o] = new NumberCoder('u64').decode(data, o);\n    const is = decoded;\n\n    return [\n      {\n        type: ReceiptType.Call,\n        from,\n        to,\n        amount,\n        assetId,\n        gas,\n        param1,\n        param2,\n        pc,\n        is,\n      },\n      o,\n    ];\n  }\n}\n\nexport type ReceiptReturn = {\n  type: ReceiptType.Return;\n  /** Contract ID of current context if in an internal context, zero otherwise (b256) */\n  id: string;\n  /** Value of register $rA (u64) */\n  val: bigint;\n  /** Value of register $pc (u64) */\n  pc: bigint;\n  /** Value of register $is (u64) */\n  is: bigint;\n};\n\nexport class ReceiptReturnCoder extends Coder<ReceiptReturn, ReceiptReturn> {\n  constructor() {\n    super('ReceiptReturn', 'struct ReceiptReturn', 0);\n  }\n\n  encode(value: ReceiptReturn): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new B256Coder().encode(value.id));\n    parts.push(new NumberCoder('u64').encode(value.val));\n    parts.push(new NumberCoder('u64').encode(value.pc));\n    parts.push(new NumberCoder('u64').encode(value.is));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [ReceiptReturn, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new B256Coder().decode(data, o);\n    const id = decoded;\n    [decoded, o] = new NumberCoder('u64').decode(data, o);\n    const val = decoded;\n    [decoded, o] = new NumberCoder('u64').decode(data, o);\n    const pc = decoded;\n    [decoded, o] = new NumberCoder('u64').decode(data, o);\n    const is = decoded;\n\n    return [\n      {\n        type: ReceiptType.Return,\n        id,\n        val,\n        pc,\n        is,\n      },\n      o,\n    ];\n  }\n}\n\nexport type ReceiptReturnData = {\n  type: ReceiptType.ReturnData;\n  /** Contract ID of current context if in an internal context, zero otherwise (b256) */\n  id: string;\n  /** Value of register $rA (u64) */\n  ptr: bigint;\n  /** Value of register $rB (u64) */\n  len: bigint;\n  /** Hash of MEM[$rA, $rB] (b256) */\n  digest: string;\n  /** Value of register $pc (u64) */\n  pc: bigint;\n  /** Value of register $is (u64) */\n  is: bigint;\n};\n\nexport class ReceiptReturnDataCoder extends Coder<ReceiptReturnData, ReceiptReturnData> {\n  constructor() {\n    super('ReceiptReturnData', 'struct ReceiptReturnData', 0);\n  }\n\n  encode(value: ReceiptReturnData): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new B256Coder().encode(value.id));\n    parts.push(new NumberCoder('u64').encode(value.ptr));\n    parts.push(new NumberCoder('u64').encode(value.len));\n    parts.push(new B256Coder().encode(value.digest));\n    parts.push(new NumberCoder('u64').encode(value.pc));\n    parts.push(new NumberCoder('u64').encode(value.is));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [ReceiptReturnData, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new B256Coder().decode(data, o);\n    const id = decoded;\n    [decoded, o] = new NumberCoder('u64').decode(data, o);\n    const ptr = decoded;\n    [decoded, o] = new NumberCoder('u64').decode(data, o);\n    const len = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const digest = decoded;\n    [decoded, o] = new NumberCoder('u64').decode(data, o);\n    const pc = decoded;\n    [decoded, o] = new NumberCoder('u64').decode(data, o);\n    const is = decoded;\n\n    return [\n      {\n        type: ReceiptType.ReturnData,\n        id,\n        ptr,\n        len,\n        digest,\n        pc,\n        is,\n      },\n      o,\n    ];\n  }\n}\n\nexport type ReceiptPanic = {\n  type: ReceiptType.Panic;\n  /** Contract ID of current context if in an internal context, zero otherwise (b256) */\n  id: string;\n  /** Panic reason (u64) */\n  reason: bigint;\n  /** Value of register $pc (u64) */\n  pc: bigint;\n  /** Value of register $is (u64) */\n  is: bigint;\n};\n\nexport class ReceiptPanicCoder extends Coder<ReceiptPanic, ReceiptPanic> {\n  constructor() {\n    super('ReceiptPanic', 'struct ReceiptPanic', 0);\n  }\n\n  encode(value: ReceiptPanic): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new B256Coder().encode(value.id));\n    parts.push(new NumberCoder('u64').encode(value.reason));\n    parts.push(new NumberCoder('u64').encode(value.pc));\n    parts.push(new NumberCoder('u64').encode(value.is));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [ReceiptPanic, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new B256Coder().decode(data, o);\n    const id = decoded;\n    [decoded, o] = new NumberCoder('u64').decode(data, o);\n    const reason = decoded;\n    [decoded, o] = new NumberCoder('u64').decode(data, o);\n    const pc = decoded;\n    [decoded, o] = new NumberCoder('u64').decode(data, o);\n    const is = decoded;\n\n    return [\n      {\n        type: ReceiptType.Panic,\n        id,\n        reason,\n        pc,\n        is,\n      },\n      o,\n    ];\n  }\n}\n\nexport type ReceiptRevert = {\n  type: ReceiptType.Revert;\n  /** Contract ID of current context if in an internal context, zero otherwise (b256) */\n  id: string;\n  /** Value of register $rA (u64) */\n  val: bigint;\n  /** Value of register $pc (u64) */\n  pc: bigint;\n  /** Value of register $is (u64) */\n  is: bigint;\n};\n\nexport class ReceiptRevertCoder extends Coder<ReceiptRevert, ReceiptRevert> {\n  constructor() {\n    super('ReceiptRevert', 'struct ReceiptRevert', 0);\n  }\n\n  encode(value: ReceiptRevert): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new B256Coder().encode(value.id));\n    parts.push(new NumberCoder('u64').encode(value.val));\n    parts.push(new NumberCoder('u64').encode(value.pc));\n    parts.push(new NumberCoder('u64').encode(value.is));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [ReceiptRevert, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new B256Coder().decode(data, o);\n    const id = decoded;\n    [decoded, o] = new NumberCoder('u64').decode(data, o);\n    const val = decoded;\n    [decoded, o] = new NumberCoder('u64').decode(data, o);\n    const pc = decoded;\n    [decoded, o] = new NumberCoder('u64').decode(data, o);\n    const is = decoded;\n\n    return [\n      {\n        type: ReceiptType.Revert,\n        id,\n        val,\n        pc,\n        is,\n      },\n      o,\n    ];\n  }\n}\n\nexport type ReceiptLog = {\n  type: ReceiptType.Log;\n  /** Contract ID of current context if in an internal context, zero otherwise (b256) */\n  id: string;\n  /** Value of register $rA (u64) */\n  val0: bigint;\n  /** Value of register $rB (u64) */\n  val1: bigint;\n  /** Value of register $rC (u64) */\n  val2: bigint;\n  /** Value of register $rD (u64) */\n  val3: bigint;\n  /** Value of register $pc (u64) */\n  pc: bigint;\n  /** Value of register $is (u64) */\n  is: bigint;\n};\n\nexport class ReceiptLogCoder extends Coder<ReceiptLog, ReceiptLog> {\n  constructor() {\n    super('ReceiptLog', 'struct ReceiptLog', 0);\n  }\n\n  encode(value: ReceiptLog): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new B256Coder().encode(value.id));\n    parts.push(new NumberCoder('u64').encode(value.val0));\n    parts.push(new NumberCoder('u64').encode(value.val1));\n    parts.push(new NumberCoder('u64').encode(value.val2));\n    parts.push(new NumberCoder('u64').encode(value.val3));\n    parts.push(new NumberCoder('u64').encode(value.pc));\n    parts.push(new NumberCoder('u64').encode(value.is));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [ReceiptLog, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new B256Coder().decode(data, o);\n    const id = decoded;\n    [decoded, o] = new NumberCoder('u64').decode(data, o);\n    const val0 = decoded;\n    [decoded, o] = new NumberCoder('u64').decode(data, o);\n    const val1 = decoded;\n    [decoded, o] = new NumberCoder('u64').decode(data, o);\n    const val2 = decoded;\n    [decoded, o] = new NumberCoder('u64').decode(data, o);\n    const val3 = decoded;\n    [decoded, o] = new NumberCoder('u64').decode(data, o);\n    const pc = decoded;\n    [decoded, o] = new NumberCoder('u64').decode(data, o);\n    const is = decoded;\n\n    return [\n      {\n        type: ReceiptType.Log,\n        id,\n        val0,\n        val1,\n        val2,\n        val3,\n        pc,\n        is,\n      },\n      o,\n    ];\n  }\n}\n\nexport type ReceiptLogData = {\n  type: ReceiptType.LogData;\n  /** Contract ID of current context if in an internal context, zero otherwise (b256) */\n  id: string;\n  /** Value of register $rA (u64) */\n  val0: bigint;\n  /** Value of register $rB (u64) */\n  val1: bigint;\n  /** Value of register $rC (u64) */\n  ptr: bigint;\n  /** Value of register $rD (u64) */\n  len: bigint;\n  /** Hash of MEM[$rC, $rD] (b256) */\n  digest: string;\n  /** Value of register $pc (u64) */\n  pc: bigint;\n  /** Value of register $is (u64) */\n  is: bigint;\n};\n\nexport class ReceiptLogDataCoder extends Coder<ReceiptLogData, ReceiptLogData> {\n  constructor() {\n    super('ReceiptLogData', 'struct ReceiptLogData', 0);\n  }\n\n  encode(value: ReceiptLogData): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new B256Coder().encode(value.id));\n    parts.push(new NumberCoder('u64').encode(value.val0));\n    parts.push(new NumberCoder('u64').encode(value.val1));\n    parts.push(new NumberCoder('u64').encode(value.ptr));\n    parts.push(new NumberCoder('u64').encode(value.len));\n    parts.push(new B256Coder().encode(value.digest));\n    parts.push(new NumberCoder('u64').encode(value.pc));\n    parts.push(new NumberCoder('u64').encode(value.is));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [ReceiptLogData, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new B256Coder().decode(data, o);\n    const id = decoded;\n    [decoded, o] = new NumberCoder('u64').decode(data, o);\n    const val0 = decoded;\n    [decoded, o] = new NumberCoder('u64').decode(data, o);\n    const val1 = decoded;\n    [decoded, o] = new NumberCoder('u64').decode(data, o);\n    const ptr = decoded;\n    [decoded, o] = new NumberCoder('u64').decode(data, o);\n    const len = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const digest = decoded;\n    [decoded, o] = new NumberCoder('u64').decode(data, o);\n    const pc = decoded;\n    [decoded, o] = new NumberCoder('u64').decode(data, o);\n    const is = decoded;\n\n    return [\n      {\n        type: ReceiptType.LogData,\n        id,\n        val0,\n        val1,\n        ptr,\n        len,\n        digest,\n        pc,\n        is,\n      },\n      o,\n    ];\n  }\n}\n\nexport type ReceiptTransfer = {\n  type: ReceiptType.Transfer;\n  /** Contract ID of current context if in an internal context, zero otherwise (b256) */\n  from: string;\n  /** Contract ID of contract to transfer coins to (b256) */\n  to: string;\n  /** Amount of coins transferred (u64) */\n  amount: bigint;\n  /** Asset ID of coins transferred (b256) */\n  assetId: string;\n  /** Value of register $pc (u64) */\n  pc: bigint;\n  /** Value of register $is (u64) */\n  is: bigint;\n};\n\nexport class ReceiptTransferCoder extends Coder<ReceiptTransfer, ReceiptTransfer> {\n  constructor() {\n    super('ReceiptTransfer', 'struct ReceiptTransfer', 0);\n  }\n\n  encode(value: ReceiptTransfer): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new B256Coder().encode(value.from));\n    parts.push(new B256Coder().encode(value.to));\n    parts.push(new NumberCoder('u64').encode(value.amount));\n    parts.push(new B256Coder().encode(value.assetId));\n    parts.push(new NumberCoder('u64').encode(value.pc));\n    parts.push(new NumberCoder('u64').encode(value.is));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [ReceiptTransfer, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new B256Coder().decode(data, o);\n    const from = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const to = decoded;\n    [decoded, o] = new NumberCoder('u64').decode(data, o);\n    const amount = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const assetId = decoded;\n    [decoded, o] = new NumberCoder('u64').decode(data, o);\n    const pc = decoded;\n    [decoded, o] = new NumberCoder('u64').decode(data, o);\n    const is = decoded;\n\n    return [\n      {\n        type: ReceiptType.Transfer,\n        from,\n        to,\n        amount,\n        assetId,\n        pc,\n        is,\n      },\n      o,\n    ];\n  }\n}\n\nexport type ReceiptTransferOut = {\n  type: ReceiptType.TransferOut;\n  /** Contract ID of current context if in an internal context, zero otherwise (b256) */\n  from: string;\n  /** Address to transfer coins to (b256) */\n  to: string;\n  /** Amount of coins transferred (u64) */\n  amount: bigint;\n  /** Asset ID of coins transferred (b256) */\n  assetId: string;\n  /** Value of register $pc (u64) */\n  pc: bigint;\n  /** Value of register $is (u64) */\n  is: bigint;\n};\n\nexport class ReceiptTransferOutCoder extends Coder<ReceiptTransferOut, ReceiptTransferOut> {\n  constructor() {\n    super('ReceiptTransferOut', 'struct ReceiptTransferOut', 0);\n  }\n\n  encode(value: ReceiptTransferOut): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new B256Coder().encode(value.from));\n    parts.push(new B256Coder().encode(value.to));\n    parts.push(new NumberCoder('u64').encode(value.amount));\n    parts.push(new B256Coder().encode(value.assetId));\n    parts.push(new NumberCoder('u64').encode(value.pc));\n    parts.push(new NumberCoder('u64').encode(value.is));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [ReceiptTransferOut, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new B256Coder().decode(data, o);\n    const from = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const to = decoded;\n    [decoded, o] = new NumberCoder('u64').decode(data, o);\n    const amount = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const assetId = decoded;\n    [decoded, o] = new NumberCoder('u64').decode(data, o);\n    const pc = decoded;\n    [decoded, o] = new NumberCoder('u64').decode(data, o);\n    const is = decoded;\n\n    return [\n      {\n        type: ReceiptType.TransferOut,\n        from,\n        to,\n        amount,\n        assetId,\n        pc,\n        is,\n      },\n      o,\n    ];\n  }\n}\n\nexport type ReceiptScriptResult = {\n  type: ReceiptType.ScriptResult;\n  /** Result variant with embedded `PanicReason` in first 8 bits and `instr` (u64) */\n  result: bigint;\n  /** Gas consumed by the script (u64) */\n  gasUsed: bigint;\n};\n\nexport class ReceiptScriptResultCoder extends Coder<ReceiptScriptResult, ReceiptScriptResult> {\n  constructor() {\n    super('ReceiptScriptResult', 'struct ReceiptScriptResult', 0);\n  }\n\n  encode(value: ReceiptScriptResult): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new NumberCoder('u64').encode(value.result));\n    parts.push(new NumberCoder('u64').encode(value.gasUsed));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [ReceiptScriptResult, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new NumberCoder('u64').decode(data, o);\n    const result = decoded;\n    [decoded, o] = new NumberCoder('u64').decode(data, o);\n    const gasUsed = decoded;\n\n    return [\n      {\n        type: ReceiptType.ScriptResult,\n        result,\n        gasUsed,\n      },\n      o,\n    ];\n  }\n}\n\nexport type Receipt =\n  | ReceiptCall\n  | ReceiptReturn\n  | ReceiptReturnData\n  | ReceiptPanic\n  | ReceiptRevert\n  | ReceiptLog\n  | ReceiptLogData\n  | ReceiptTransfer\n  | ReceiptTransferOut\n  | ReceiptScriptResult;\n\nexport class ReceiptCoder extends Coder<Receipt, Receipt> {\n  constructor() {\n    super('Receipt', 'struct Receipt', 0);\n  }\n\n  encode(value: Receipt): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new NumberCoder('u8').encode(value.type));\n    switch (value.type) {\n      case ReceiptType.Call: {\n        parts.push(new ReceiptCallCoder().encode(value));\n        break;\n      }\n      case ReceiptType.Return: {\n        parts.push(new ReceiptReturnCoder().encode(value));\n        break;\n      }\n      case ReceiptType.ReturnData: {\n        parts.push(new ReceiptReturnDataCoder().encode(value));\n        break;\n      }\n      case ReceiptType.Panic: {\n        parts.push(new ReceiptPanicCoder().encode(value));\n        break;\n      }\n      case ReceiptType.Revert: {\n        parts.push(new ReceiptRevertCoder().encode(value));\n        break;\n      }\n      case ReceiptType.Log: {\n        parts.push(new ReceiptLogCoder().encode(value));\n        break;\n      }\n      case ReceiptType.LogData: {\n        parts.push(new ReceiptLogDataCoder().encode(value));\n        break;\n      }\n      case ReceiptType.Transfer: {\n        parts.push(new ReceiptTransferCoder().encode(value));\n        break;\n      }\n      case ReceiptType.TransferOut: {\n        parts.push(new ReceiptTransferOutCoder().encode(value));\n        break;\n      }\n      case ReceiptType.ScriptResult: {\n        parts.push(new ReceiptScriptResultCoder().encode(value));\n        break;\n      }\n      default: {\n        throw new Error('Invalid Receipt type');\n      }\n    }\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [Receipt, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new NumberCoder('u8').decode(data, o);\n    const type = decoded as ReceiptType;\n    switch (type) {\n      case ReceiptType.Call: {\n        [decoded, o] = new ReceiptCallCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case ReceiptType.Return: {\n        [decoded, o] = new ReceiptReturnCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case ReceiptType.ReturnData: {\n        [decoded, o] = new ReceiptReturnDataCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case ReceiptType.Panic: {\n        [decoded, o] = new ReceiptPanicCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case ReceiptType.Revert: {\n        [decoded, o] = new ReceiptRevertCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case ReceiptType.Log: {\n        [decoded, o] = new ReceiptLogCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case ReceiptType.LogData: {\n        [decoded, o] = new ReceiptLogDataCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case ReceiptType.Transfer: {\n        [decoded, o] = new ReceiptTransferCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case ReceiptType.TransferOut: {\n        [decoded, o] = new ReceiptTransferOutCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case ReceiptType.ScriptResult: {\n        [decoded, o] = new ReceiptScriptResultCoder().decode(data, o);\n        return [decoded, o];\n      }\n      default: {\n        throw new Error('Invalid Receipt type');\n      }\n    }\n  }\n}\n","import { B256Coder, StructCoder } from '@fuel-ts/abi-coder';\n\nexport type StorageSlot = {\n  /** Key (b256) */\n  key: string;\n  /** Value (b256) */\n  value: string;\n};\n\nexport class StorageSlotCoder extends StructCoder<{\n  key: B256Coder;\n  value: B256Coder;\n}> {\n  constructor() {\n    super('StorageSlot', {\n      key: new B256Coder(),\n      value: new B256Coder(),\n    });\n  }\n}\n","/* eslint-disable max-classes-per-file */\n\nimport { concat } from '@ethersproject/bytes';\nimport { Coder, ArrayCoder, B256Coder, NumberCoder } from '@fuel-ts/abi-coder';\n\nimport { ByteArrayCoder } from './byte-array';\nimport type { Input } from './input';\nimport { InputCoder } from './input';\nimport type { Output } from './output';\nimport { OutputCoder } from './output';\nimport { StorageSlotCoder } from './storage-slot';\nimport type { StorageSlot } from './storage-slot';\nimport type { Witness } from './witness';\nimport { WitnessCoder } from './witness';\n\nexport enum TransactionType /* u8 */ {\n  Script = 0,\n  Create = 1,\n}\n\nexport type TransactionScript = {\n  type: TransactionType.Script;\n  /** Gas price for transaction (u64) */\n  gasPrice: bigint;\n  /** Gas limit for transaction (u64) */\n  gasLimit: bigint;\n  /** Price per transaction byte (u64) */\n  bytePrice: bigint;\n  /** Block until which tx cannot be included (u64) */\n  maturity: bigint;\n  /** Script length, in instructions (u16) */\n  scriptLength: number;\n  /** Length of script input data, in bytes (u16) */\n  scriptDataLength: number;\n  /** Number of inputs (u8) */\n  inputsCount: number;\n  /** Number of outputs (u8) */\n  outputsCount: number;\n  /** Number of witnesses (u8) */\n  witnessesCount: number;\n  /** Merkle root of receipts (b256) */\n  receiptsRoot: string;\n  /** Script to execute (byte[]) */\n  script: string;\n  /** Script input data (parameters) (byte[]) */\n  scriptData: string;\n  /** List of inputs (Input[]) */\n  inputs: Input[];\n  /** List of outputs (Output[]) */\n  outputs: Output[];\n  /** List of witnesses (Witness[]) */\n  witnesses: Witness[];\n};\n\nexport class TransactionScriptCoder extends Coder<TransactionScript, TransactionScript> {\n  constructor() {\n    super('TransactionScript', 'struct TransactionScript', 0);\n  }\n\n  encode(value: TransactionScript): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new NumberCoder('u64').encode(value.gasPrice));\n    parts.push(new NumberCoder('u64').encode(value.gasLimit));\n    parts.push(new NumberCoder('u64').encode(value.bytePrice));\n    parts.push(new NumberCoder('u64').encode(value.maturity));\n    parts.push(new NumberCoder('u16').encode(value.scriptLength));\n    parts.push(new NumberCoder('u16').encode(value.scriptDataLength));\n    parts.push(new NumberCoder('u8').encode(value.inputsCount));\n    parts.push(new NumberCoder('u8').encode(value.outputsCount));\n    parts.push(new NumberCoder('u8').encode(value.witnessesCount));\n    parts.push(new B256Coder().encode(value.receiptsRoot));\n    parts.push(new ByteArrayCoder(value.scriptLength).encode(value.script));\n    parts.push(new ByteArrayCoder(value.scriptDataLength).encode(value.scriptData));\n    parts.push(new ArrayCoder(new InputCoder(), value.inputsCount).encode(value.inputs));\n    parts.push(new ArrayCoder(new OutputCoder(), value.outputsCount).encode(value.outputs));\n    parts.push(new ArrayCoder(new WitnessCoder(), value.witnessesCount).encode(value.witnesses));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [TransactionScript, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new NumberCoder('u64').decode(data, o);\n    const gasPrice = decoded;\n    [decoded, o] = new NumberCoder('u64').decode(data, o);\n    const gasLimit = decoded;\n    [decoded, o] = new NumberCoder('u64').decode(data, o);\n    const bytePrice = decoded;\n    [decoded, o] = new NumberCoder('u64').decode(data, o);\n    const maturity = decoded;\n    [decoded, o] = new NumberCoder('u16').decode(data, o);\n    [decoded, o] = new NumberCoder('u16').decode(data, o);\n    [decoded, o] = new NumberCoder('u8').decode(data, o);\n    [decoded, o] = new NumberCoder('u8').decode(data, o);\n    [decoded, o] = new NumberCoder('u8').decode(data, o);\n    const scriptLength = decoded;\n    const scriptDataLength = decoded;\n    const inputsCount = decoded;\n    const outputsCount = decoded;\n    const witnessesCount = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const receiptsRoot = decoded;\n    [decoded, o] = new ByteArrayCoder(scriptLength).decode(data, o);\n    const script = decoded;\n    [decoded, o] = new ByteArrayCoder(scriptDataLength).decode(data, o);\n    const scriptData = decoded;\n    [decoded, o] = new ArrayCoder(new InputCoder(), inputsCount).decode(data, o);\n    const inputs = decoded;\n    [decoded, o] = new ArrayCoder(new OutputCoder(), outputsCount).decode(data, o);\n    const outputs = decoded;\n    [decoded, o] = new ArrayCoder(new WitnessCoder(), witnessesCount).decode(data, o);\n    const witnesses = decoded;\n\n    return [\n      {\n        type: TransactionType.Script,\n        gasPrice,\n        gasLimit,\n        bytePrice,\n        maturity,\n        scriptLength,\n        scriptDataLength,\n        inputsCount,\n        outputsCount,\n        witnessesCount,\n        receiptsRoot,\n        script,\n        scriptData,\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        inputs,\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        outputs,\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        witnesses,\n      },\n      o,\n    ];\n  }\n}\n\nexport type TransactionCreate = {\n  type: TransactionType.Create;\n  /** Gas price for transaction (u64) */\n  gasPrice: bigint;\n  /** Gas limit for transaction (u64) */\n  gasLimit: bigint;\n  /** Price per transaction byte (u64) */\n  bytePrice: bigint;\n  /** Block until which tx cannot be included (u64) */\n  maturity: bigint;\n  /** Contract bytecode length, in instructions (u32) */\n  bytecodeLength: number;\n  /** Witness index of contract bytecode to create (u8) */\n  bytecodeWitnessIndex: number;\n  /** Number of static contracts (u8) */\n  staticContractsCount: number;\n  /** Number of storage slots to initialize (u16) */\n  storageSlotsCount: number;\n  /** Number of inputs (u8) */\n  inputsCount: number;\n  /** Number of outputs (u8) */\n  outputsCount: number;\n  /** Number of witnesses (u8) */\n  witnessesCount: number;\n  /** Salt (b256) */\n  salt: string;\n  /** List of static contracts (b256[]) */\n  staticContracts: string[];\n  /** List of inputs (StorageSlot[]) */\n  storageSlots: StorageSlot[];\n  /** List of inputs (Input[]) */\n  inputs: Input[];\n  /** List of outputs (Output[]) */\n  outputs: Output[];\n  /** List of witnesses (Witness[]) */\n  witnesses: Witness[];\n};\n\nexport class TransactionCreateCoder extends Coder<TransactionCreate, TransactionCreate> {\n  constructor() {\n    super('TransactionCreate', 'struct TransactionCreate', 0);\n  }\n\n  encode(value: TransactionCreate): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new NumberCoder('u64').encode(value.gasPrice));\n    parts.push(new NumberCoder('u64').encode(value.gasLimit));\n    parts.push(new NumberCoder('u64').encode(value.bytePrice));\n    parts.push(new NumberCoder('u64').encode(value.maturity));\n    parts.push(new NumberCoder('u32').encode(value.bytecodeLength));\n    parts.push(new NumberCoder('u8').encode(value.bytecodeWitnessIndex));\n    parts.push(new NumberCoder('u8').encode(value.staticContractsCount));\n    parts.push(new NumberCoder('u16').encode(value.storageSlotsCount));\n    parts.push(new NumberCoder('u8').encode(value.inputsCount));\n    parts.push(new NumberCoder('u8').encode(value.outputsCount));\n    parts.push(new NumberCoder('u8').encode(value.witnessesCount));\n    parts.push(new B256Coder().encode(value.salt));\n    parts.push(\n      new ArrayCoder(new B256Coder(), value.staticContractsCount).encode(value.staticContracts)\n    );\n    parts.push(\n      new ArrayCoder(new StorageSlotCoder(), value.storageSlotsCount).encode(value.storageSlots)\n    );\n    parts.push(new ArrayCoder(new InputCoder(), value.inputsCount).encode(value.inputs));\n    parts.push(new ArrayCoder(new OutputCoder(), value.outputsCount).encode(value.outputs));\n    parts.push(new ArrayCoder(new WitnessCoder(), value.witnessesCount).encode(value.witnesses));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [TransactionCreate, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new NumberCoder('u64').decode(data, o);\n    const gasPrice = decoded;\n    [decoded, o] = new NumberCoder('u64').decode(data, o);\n    const gasLimit = decoded;\n    [decoded, o] = new NumberCoder('u64').decode(data, o);\n    const bytePrice = decoded;\n    [decoded, o] = new NumberCoder('u64').decode(data, o);\n    const maturity = decoded;\n    [decoded, o] = new NumberCoder('u16').decode(data, o);\n    [decoded, o] = new NumberCoder('u8').decode(data, o);\n    [decoded, o] = new NumberCoder('u8').decode(data, o);\n    [decoded, o] = new NumberCoder('u16').decode(data, o);\n    [decoded, o] = new NumberCoder('u8').decode(data, o);\n    [decoded, o] = new NumberCoder('u8').decode(data, o);\n    [decoded, o] = new NumberCoder('u8').decode(data, o);\n    const bytecodeLength = decoded;\n    const bytecodeWitnessIndex = decoded;\n    const staticContractsCount = decoded;\n    const storageSlotsCount = decoded;\n    const inputsCount = decoded;\n    const outputsCount = decoded;\n    const witnessesCount = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const salt = decoded;\n    [decoded, o] = new ArrayCoder(new B256Coder(), staticContractsCount).decode(data, o);\n    const staticContracts = decoded;\n    [decoded, o] = new ArrayCoder(new StorageSlotCoder(), storageSlotsCount).decode(data, o);\n    const storageSlots = decoded;\n    [decoded, o] = new ArrayCoder(new InputCoder(), inputsCount).decode(data, o);\n    const inputs = decoded;\n    [decoded, o] = new ArrayCoder(new OutputCoder(), outputsCount).decode(data, o);\n    const outputs = decoded;\n    [decoded, o] = new ArrayCoder(new WitnessCoder(), witnessesCount).decode(data, o);\n    const witnesses = decoded;\n\n    return [\n      {\n        type: TransactionType.Create,\n        gasPrice,\n        gasLimit,\n        bytePrice,\n        maturity,\n        bytecodeLength,\n        bytecodeWitnessIndex,\n        staticContractsCount,\n        storageSlotsCount,\n        inputsCount,\n        outputsCount,\n        witnessesCount,\n        salt,\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignores\n        staticContracts,\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        storageSlots,\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        inputs,\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        outputs,\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        witnesses,\n      },\n      o,\n    ];\n  }\n}\n\nexport type Transaction = TransactionScript | TransactionCreate;\n\nexport class TransactionCoder extends Coder<Transaction, Transaction> {\n  constructor() {\n    super('Transaction', 'struct Transaction', 0);\n  }\n\n  encode(value: Transaction): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new NumberCoder('u8').encode(value.type));\n    switch (value.type) {\n      case TransactionType.Script: {\n        parts.push(new TransactionScriptCoder().encode(value));\n        break;\n      }\n      case TransactionType.Create: {\n        parts.push(new TransactionCreateCoder().encode(value));\n        break;\n      }\n      default: {\n        throw new Error('Invalid Transaction type');\n      }\n    }\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [Transaction, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new NumberCoder('u8').decode(data, o);\n    const type = decoded as TransactionType;\n    switch (type) {\n      case TransactionType.Script: {\n        [decoded, o] = new TransactionScriptCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case TransactionType.Create: {\n        [decoded, o] = new TransactionCreateCoder().decode(data, o);\n        return [decoded, o];\n      }\n      default: {\n        throw new Error('Invalid Input type');\n      }\n    }\n  }\n}\n","import { concat } from '@ethersproject/bytes';\nimport { Coder, NumberCoder } from '@fuel-ts/abi-coder';\n\nimport { ByteArrayCoder } from './byte-array';\n\nexport type Witness = {\n  /** Length of witness data, in bytes (u32) */\n  dataLength: number;\n  /** Witness data (byte[]) */\n  data: string;\n};\n\nexport class WitnessCoder extends Coder<Witness, Witness> {\n  constructor() {\n    super(\n      'Witness',\n      // Types of dynamic length are not supported in the ABI\n      'unknown',\n      0\n    );\n  }\n\n  encode(value: Witness): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new NumberCoder('u32').encode(value.dataLength));\n    parts.push(new ByteArrayCoder(value.dataLength).encode(value.data));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [Witness, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new NumberCoder('u32').decode(data, o);\n    const dataLength = decoded;\n    [decoded, o] = new ByteArrayCoder(dataLength).decode(data, o);\n    const witnessData = decoded;\n\n    return [\n      {\n        dataLength,\n        data: witnessData,\n      },\n      o,\n    ];\n  }\n}\n","/** Maximum contract size, in bytes. */\nexport const CONTRACT_MAX_SIZE = 16 * 1024;\n\n/** Maximum number of inputs. */\nexport const MAX_INPUTS = 8;\n\n/** Maximum number of outputs. */\nexport const MAX_OUTPUTS = 8;\n\n/** Maximum number of witnesses. */\nexport const MAX_WITNESSES = 16;\n\n/** Maximum gas per transaction. */\nexport const MAX_GAS_PER_TX = 1000000;\n\n// TODO: set max script length const\n/** Maximum length of script, in instructions. */\nexport const MAX_SCRIPT_LENGTH = 1024 * 1024 * 1024;\n\n// TODO: set max script length const\n/** Maximum length of script data, in bytes. */\nexport const MAX_SCRIPT_DATA_LENGTH = 1024 * 1024 * 1024;\n\n/** Maximum number of static contracts. */\nexport const MAX_STATIC_CONTRACTS = 255;\n\n// TODO: set max predicate length value\n/** Maximum length of predicate, in instructions. */\nexport const MAX_PREDICATE_LENGTH = 1024 * 1024;\n\n// TODO: set max predicate data length value\n/** Maximum length of predicate data, in bytes. */\nexport const MAX_PREDICATE_DATA_LENGTH = 1024 * 1024;\n"],"mappings":"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","names":[]}