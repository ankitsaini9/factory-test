{"version":3,"sources":["../src/index.ts","../src/script.ts","../src/errors.ts","../src/scripts.ts"],"sourcesContent":["export * from './script';\nexport * from './scripts';\n","import type { BytesLike } from '@ethersproject/bytes';\nimport { arrayify } from '@ethersproject/bytes';\nimport type {\n  CallResult,\n  TransactionResultReceipt,\n  TransactionResultReturnReceipt,\n  TransactionResultReturnDataReceipt,\n  TransactionResultRevertReceipt,\n  TransactionResultScriptResultReceipt,\n} from '@fuel-ts/providers';\nimport { ReceiptType } from '@fuel-ts/providers';\n\nimport { ScriptResultDecoderError } from './errors';\n\n// TODO: Source these from other packages\nconst VM_TX_MEMORY = 10240;\nconst TRANSACTION_SCRIPT_FIXED_SIZE = 112;\nconst WORD_SIZE = 8;\nconst CONTRACT_ID_LEN = 32;\nconst ASSET_ID_LEN = 32;\nconst AMOUNT_LEN = 8;\n\nexport type ScriptResult = {\n  code: bigint;\n  gasUsed: bigint;\n  receipts: TransactionResultReceipt[];\n  scriptResultReceipt: TransactionResultScriptResultReceipt;\n  returnReceipt:\n    | TransactionResultReturnReceipt\n    | TransactionResultReturnDataReceipt\n    | TransactionResultRevertReceipt;\n  callResult: CallResult;\n};\n\nfunction callResultToScriptResult(callResult: CallResult): ScriptResult {\n  const receipts = [...callResult.receipts];\n\n  // Every script call ends with two specific receipts\n  // Here we check them so `this.scriptResultDecoder` doesn't have to\n  const scriptResultReceipt = receipts.pop();\n  if (!scriptResultReceipt) {\n    throw new Error(`Expected scriptResultReceipt`);\n  }\n  if (scriptResultReceipt.type !== ReceiptType.ScriptResult) {\n    throw new Error(`Invalid scriptResultReceipt type: ${scriptResultReceipt.type}`);\n  }\n  const returnReceipt = receipts.pop();\n  if (!returnReceipt) {\n    throw new Error(`Expected returnReceipt`);\n  }\n  if (\n    returnReceipt.type !== ReceiptType.Return &&\n    returnReceipt.type !== ReceiptType.ReturnData &&\n    returnReceipt.type !== ReceiptType.Revert\n  ) {\n    throw new Error(`Invalid returnReceipt type: ${returnReceipt.type}`);\n  }\n\n  const scriptResult = {\n    code: scriptResultReceipt.result,\n    gasUsed: scriptResultReceipt.gasUsed,\n    receipts,\n    scriptResultReceipt,\n    returnReceipt,\n    callResult,\n  };\n\n  return scriptResult;\n}\nexport class Script<TData = void, TResult = void> {\n  bytes: Uint8Array;\n  scriptDataEncoder: (data: TData) => Uint8Array;\n  scriptResultDecoder: (scriptResult: ScriptResult) => TResult;\n\n  constructor(\n    bytes: BytesLike,\n    scriptDataEncoder: (data: TData) => Uint8Array,\n    scriptResultDecoder: (scriptResult: ScriptResult) => TResult\n  ) {\n    this.bytes = arrayify(bytes);\n    this.scriptDataEncoder = scriptDataEncoder;\n    this.scriptResultDecoder = scriptResultDecoder;\n  }\n\n  getScriptDataOffset() {\n    return VM_TX_MEMORY + TRANSACTION_SCRIPT_FIXED_SIZE + this.bytes.length;\n  }\n\n  /**\n   * Returns the memory offset for the contract call argument\n   * Used for struct inputs\n   */\n  getArgOffset() {\n    const callDataOffset = this.getScriptDataOffset() + ASSET_ID_LEN + AMOUNT_LEN;\n    return callDataOffset + CONTRACT_ID_LEN + WORD_SIZE + WORD_SIZE;\n  }\n\n  /**\n   * Encodes the data for a script call\n   */\n  encodeScriptData(data: TData): Uint8Array {\n    return this.scriptDataEncoder(data);\n  }\n\n  /**\n   * Decodes the result of a script call\n   */\n  decodeCallResult(callResult: CallResult): TResult {\n    try {\n      const scriptResult = callResultToScriptResult(callResult);\n      const decoded = this.scriptResultDecoder(scriptResult);\n      return decoded;\n    } catch (error) {\n      throw new ScriptResultDecoderError(callResult, (error as Error).message);\n    }\n  }\n}\n","import { ZeroBytes32 } from '@fuel-ts/constants';\nimport type {\n  CallResult,\n  TransactionResultLogDataReceipt,\n  TransactionResultLogReceipt,\n  TransactionResultRevertReceipt,\n} from '@fuel-ts/providers';\nimport { ReceiptType } from '@fuel-ts/providers';\n\nconst bigintReplacer = (key: unknown, value: unknown) =>\n  typeof value === 'bigint' ? value.toString() : value;\n\nconst printLineWithId = (id: string, line: string) =>\n  `${id === ZeroBytes32 ? 'script' : id}: ${line}`;\n\nexport class ScriptResultDecoderError extends Error {\n  constructor(result: CallResult, message: string) {\n    const revertReceipts = result.receipts.filter(\n      (r) => r.type === ReceiptType.Revert\n    ) as TransactionResultRevertReceipt[];\n    const revertsText = revertReceipts.length\n      ? `Reverts:\\n${revertReceipts\n          .map(({ type, id, ...r }) =>\n            printLineWithId(id, `${r.val} ${JSON.stringify(r, bigintReplacer)}`)\n          )\n          .join('\\n')}`\n      : null;\n    const logReceipts = result.receipts.filter(\n      (r) => r.type === ReceiptType.Log || r.type === ReceiptType.LogData\n    ) as Array<TransactionResultLogReceipt | TransactionResultLogDataReceipt>;\n    const logsText = logReceipts.length\n      ? `Logs:\\n${logReceipts\n          .map(({ type, id, ...r }) =>\n            printLineWithId(\n              id,\n              `${\n                type === ReceiptType.LogData ? (r as TransactionResultLogDataReceipt).data : r.val0\n              }`\n            )\n          )\n          .join('\\n')}`\n      : null;\n    const receiptsText = `Receipts:\\n${JSON.stringify(\n      result.receipts.map(({ type, ...r }) => ({ type: ReceiptType[type], ...r })),\n      bigintReplacer,\n      2\n    )}`;\n    super(\n      `${message}\\n\\n${revertsText ? `${revertsText}\\n\\n` : ''}${\n        logsText ? `${logsText}\\n\\n` : ''\n      }${receiptsText}`\n    );\n  }\n}\n","import { Script } from './script';\n\n/**\n * A script that just returns zero\n *\n * Accepts nothing\n * Returns nothing\n *\n * Used for coin transfer transactions\n */\nexport const returnZeroScript = new Script(\n  /*\n    Opcode::RET(REG_ZERO)\n    Opcode::NOOP\n  */\n  // TODO: Don't use hardcoded scripts: https://github.com/FuelLabs/fuels-ts/issues/281\n  '0x24000000',\n  () => new Uint8Array(0),\n  () => undefined\n);\n"],"mappings":"i1BAAA,wECCA,MAAyB,gCASzB,EAA4B,8BCV5B,MAA4B,8BAO5B,EAA4B,8BAEtB,EAAiB,CAAC,EAAc,IACpC,MAAO,IAAU,SAAW,EAAM,SAAS,EAAI,EAE3C,EAAkB,CAAC,EAAY,IACnC,GAAG,IAAO,cAAc,SAAW,MAAO,IAErC,eAAuC,MAAM,CAClD,YAAY,EAAoB,EAAiB,CAC/C,GAAM,GAAiB,EAAO,SAAS,OACrC,AAAC,GAAM,EAAE,OAAS,cAAY,MAChC,EACM,EAAc,EAAe,OAC/B;AAAA,EAAa,EACV,IAAI,AAAC,GAAoB,CAApB,QAAE,QAAM,MAAR,EAAe,IAAf,EAAe,CAAb,OAAM,OACZ,SAAgB,EAAI,GAAG,EAAE,OAAO,KAAK,UAAU,EAAG,CAAc,GAAG,EACrE,EACC,KAAK;AAAA,CAAI,IACZ,KACE,EAAc,EAAO,SAAS,OAClC,AAAC,GAAM,EAAE,OAAS,cAAY,KAAO,EAAE,OAAS,cAAY,OAC9D,EACM,EAAW,EAAY,OACzB;AAAA,EAAU,EACP,IAAI,AAAC,GAAoB,CAApB,QAAE,QAAM,MAAR,EAAe,IAAf,EAAe,CAAb,OAAM,OACZ,SACE,EACA,GACE,IAAS,cAAY,QAAW,EAAsC,KAAO,EAAE,MAEnF,EACF,EACC,KAAK;AAAA,CAAI,IACZ,KACE,EAAe;AAAA,EAAc,KAAK,UACtC,EAAO,SAAS,IAAI,AAAC,GAAgB,CAAhB,QAAE,SAAF,EAAW,IAAX,EAAW,CAAT,SAAkB,UAAE,KAAM,cAAY,IAAU,GAAI,EAC3E,EACA,CACF,IACA,MACE,GAAG;AAAA;AAAA,EAAc,EAAc,GAAG;AAAA;AAAA,EAAoB,KACpD,EAAW,GAAG;AAAA;AAAA,EAAiB,KAC9B,GACL,CACF,CACF,EDtCA,GAAM,GAAe,MACf,EAAgC,IAChC,EAAY,EACZ,EAAkB,GAClB,EAAe,GACf,EAAa,EAcnB,WAAkC,EAAsC,CACtE,GAAM,GAAW,CAAC,GAAG,EAAW,QAAQ,EAIlC,EAAsB,EAAS,IAAI,EACzC,GAAI,CAAC,EACH,KAAM,IAAI,OAAM,8BAA8B,EAEhD,GAAI,EAAoB,OAAS,cAAY,aAC3C,KAAM,IAAI,OAAM,qCAAqC,EAAoB,MAAM,EAEjF,GAAM,GAAgB,EAAS,IAAI,EACnC,GAAI,CAAC,EACH,KAAM,IAAI,OAAM,wBAAwB,EAE1C,GACE,EAAc,OAAS,cAAY,QACnC,EAAc,OAAS,cAAY,YACnC,EAAc,OAAS,cAAY,OAEnC,KAAM,IAAI,OAAM,+BAA+B,EAAc,MAAM,EAYrE,MATqB,CACnB,KAAM,EAAoB,OAC1B,QAAS,EAAoB,QAC7B,WACA,sBACA,gBACA,YACF,CAGF,CACO,WAA2C,CAKhD,YACE,EACA,EACA,EACA,CACA,KAAK,MAAQ,eAAS,CAAK,EAC3B,KAAK,kBAAoB,EACzB,KAAK,oBAAsB,CAC7B,CAEA,qBAAsB,CACpB,MAAO,GAAe,EAAgC,KAAK,MAAM,MACnE,CAMA,cAAe,CAEb,MAAO,AADgB,MAAK,oBAAoB,EAAI,EAAe,EAC3C,EAAkB,EAAY,CACxD,CAKA,iBAAiB,EAAyB,CACxC,MAAO,MAAK,kBAAkB,CAAI,CACpC,CAKA,iBAAiB,EAAiC,CAChD,GAAI,CACF,GAAM,GAAe,EAAyB,CAAU,EAExD,MADgB,MAAK,oBAAoB,CAAY,CAEvD,OAAS,EAAP,CACA,KAAM,IAAI,GAAyB,EAAa,EAAgB,OAAO,CACzE,CACF,CACF,EE1GO,GAAM,GAAmB,GAAI,GAMlC,aACA,IAAM,GAAI,YAAW,CAAC,EACtB,IAAG,EACL","names":[]}