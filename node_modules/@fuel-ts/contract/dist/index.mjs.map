{"version":3,"sources":["../src/contract.ts","../src/scripts.ts","../src/multicall/out/debug/multicall-bin.ts","../src/contract-factory.ts","../src/util.ts"],"sourcesContent":["/* eslint-disable no-restricted-syntax */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { Logger } from '@ethersproject/logger';\nimport { Interface } from '@fuel-ts/abi-coder';\nimport type { FunctionFragment, JsonAbi } from '@fuel-ts/abi-coder';\nimport { AbstractContract } from '@fuel-ts/interfaces';\nimport type { BigNumberish } from '@fuel-ts/math';\nimport type {\n  CallResult,\n  CoinQuantityLike,\n  TransactionRequest,\n  TransactionResult,\n  CoinQuantity,\n} from '@fuel-ts/providers';\nimport { coinQuantityfy, ScriptTransactionRequest, Provider } from '@fuel-ts/providers';\nimport { Wallet } from '@fuel-ts/wallet';\n\nimport { contractCallScript } from './scripts';\nimport type { ContractCall as MulticallCall } from './scripts';\n\nconst logger = new Logger(process.env.BUILD_VERSION || '~');\n\ntype ContractFunction<T = any> = (...args: Array<any>) => Promise<T>;\n\ntype ContractCallOptions = Partial<{\n  gasLimit: BigNumberish;\n  forward: CoinQuantityLike;\n  variableOutputs: number;\n}>;\n\nexport type ContractCall = {\n  contract: Contract;\n  func: FunctionFragment;\n  args: Array<any>;\n  options: ContractCallOptions;\n};\n\nconst buildMulticallCall = (\n  contract: Contract,\n  func: FunctionFragment,\n  args: Array<any>,\n  options: ContractCallOptions = {}\n): MulticallCall => {\n  const data = contract.interface.encodeFunctionData(func, args);\n  const forwardQuantity = options.forward && coinQuantityfy(options.forward);\n  const call = {\n    contractId: contract.id,\n    data,\n    assetId: forwardQuantity?.assetId,\n    amount: forwardQuantity?.amount,\n    gas: options.gasLimit,\n  };\n  return call;\n};\n\nexport type TransactionOverrides = Partial<{\n  gasPrice: BigNumberish;\n  gasLimit: BigNumberish;\n  bytePrice: BigNumberish;\n  maturity: BigNumberish;\n  transformRequest?: (\n    transactionRequest: ScriptTransactionRequest\n  ) => Promise<ScriptTransactionRequest>;\n}>;\n\nexport type Overrides = ContractCallOptions & TransactionOverrides;\n\nconst splitFnArgs = <TRest extends Array<any>>(\n  func: FunctionFragment,\n  args: Array<any>\n): [Array<any>, ...TRest] => {\n  const fnArgs = args.slice(0, func.inputs.length);\n  const rest = args.slice(func.inputs.length) as TRest;\n  return [fnArgs, ...rest];\n};\n\nexport type BuildTransactionOptions = Partial<{\n  fundTransaction: boolean;\n}> &\n  TransactionOverrides;\n\nconst createPushRequiredForward =\n  (requiredForwards: Map<Wallet, CoinQuantity[]>) =>\n  (wallet: Wallet, forward: CoinQuantityLike) => {\n    const coinForward = coinQuantityfy(forward);\n    const requiredForwardAssets = requiredForwards.get(wallet) ?? [];\n    const sameAsset = requiredForwardAssets.find((r) => r.assetId === coinForward.assetId);\n    // If coin to forward was already included\n    // Sum the new amount to the current coin\n    if (sameAsset) {\n      sameAsset.amount += coinForward.amount;\n    } else {\n      requiredForwards.set(wallet, [...requiredForwardAssets, coinForward]);\n    }\n  };\n\nexport const buildTransaction = async (\n  calls: ContractCall[],\n  options: BuildTransactionOptions = {}\n): Promise<ScriptTransactionRequest> => {\n  const { fundTransaction, ...overrides } = options;\n\n  // Keep a lists of things we need for the transaction\n  const requiredContracts = new Set<Contract>();\n  let requiredGasLimit = 0;\n  const requiredForwards = new Map<Wallet, CoinQuantity[]>();\n  const pushRequiredForward = createPushRequiredForward(requiredForwards);\n\n  let requiredVariableOutputs = 0;\n\n  // Build MulticallCalls\n  const multicallCalls = [] as MulticallCall[];\n  for (const call of calls) {\n    requiredContracts.add(call.contract);\n\n    if (call.options.gasLimit) {\n      requiredGasLimit += Number(call.options.gasLimit);\n    }\n\n    const forward = call.options.forward && coinQuantityfy(call.options.forward);\n    if (forward) {\n      const wallet = call.contract.wallet;\n      if (!wallet) {\n        throw new Error('Cannot get coins without a wallet');\n      }\n      pushRequiredForward(wallet, forward);\n    }\n\n    if (call.options.variableOutputs) {\n      requiredVariableOutputs += call.options.variableOutputs;\n    }\n\n    multicallCalls.push(buildMulticallCall(call.contract, call.func, call.args, call.options));\n  }\n\n  // Check gasLimit\n  const gasLimit = overrides.gasLimit ?? 1000000;\n  if (gasLimit < requiredGasLimit) {\n    throw new Error(\n      `Gas limit ${gasLimit} is insufficient for the transaction, at least ${requiredGasLimit} is required.`\n    );\n  }\n\n  const request = new ScriptTransactionRequest({\n    gasLimit,\n    ...overrides,\n  });\n\n  request.setScript(contractCallScript, multicallCalls);\n  for (const contract of requiredContracts) {\n    request.addContract(contract);\n  }\n  if (requiredVariableOutputs) {\n    request.addVariableOutputs(requiredVariableOutputs);\n  }\n\n  // If fundTransaction is true we add amount of\n  // native coins needed to fund the gasFee for the transaction\n  if (options?.fundTransaction) {\n    const fundingWallet = calls[0].contract.wallet;\n    if (!fundingWallet) {\n      throw new Error('Cannot fund transaction without a wallet');\n    }\n    const amount = request.calculateFee();\n    pushRequiredForward(fundingWallet, [amount]);\n  }\n\n  // Get and add required coins to the transaction\n  for (const [wallet, forwards] of requiredForwards) {\n    const coins = await wallet.getCoinsToSpend(forwards);\n    request.addCoins(coins);\n  }\n\n  // Enable user to transform the request right\n  // before send transaction\n  if (typeof overrides.transformRequest === 'function') {\n    return overrides.transformRequest(request);\n  }\n\n  return request;\n};\n\nconst buildPrepareCall = (\n  contract: Contract,\n  func: FunctionFragment\n): ((...args: Array<any>) => ContractCall) =>\n  function prepareCall(...args: Array<any>): ContractCall {\n    const [fnArgs, callOptions = {}] = splitFnArgs<[ContractCallOptions?]>(func, args);\n    const call = {\n      contract,\n      func,\n      args: fnArgs,\n      options: callOptions,\n    };\n    return call;\n  };\n\nconst buildDryRunTransaction = (\n  contract: Contract,\n  func: FunctionFragment\n): ContractFunction<CallResult> =>\n  async function dryRunTransaction(...args: Array<any>): Promise<any> {\n    if (!contract.provider) {\n      return logger.throwArgumentError(\n        'Cannot call without provider',\n        'provider',\n        contract.provider\n      );\n    }\n\n    const [fnArgs, overrides = {}] = splitFnArgs<[Overrides?]>(func, args);\n    const call = {\n      contract,\n      func,\n      args: fnArgs,\n      options: overrides,\n    };\n    const request = await buildTransaction([call], overrides);\n    const result = await contract.provider.call(request, {\n      utxoValidation: false,\n    });\n    return result;\n  };\n\nconst buildDryRun = (contract: Contract, func: FunctionFragment): ContractFunction<any> =>\n  async function dryRun(...args: Array<any>): Promise<any> {\n    const result = await buildDryRunTransaction(contract, func).apply(contract, args);\n    const encodedResults = contractCallScript.decodeCallResult(result);\n    const encodedResult = encodedResults[0];\n    const returnValue = contract.interface.decodeFunctionResult(func, encodedResult)[0];\n\n    return returnValue;\n  };\n\nconst buildSubmitTransaction = (\n  contract: Contract,\n  func: FunctionFragment\n): ContractFunction<TransactionResult<any>> =>\n  async function submitTransaction(...args: Array<any>): Promise<any> {\n    if (!contract.wallet) {\n      return logger.throwArgumentError('Cannot call without wallet', 'wallet', contract.wallet);\n    }\n\n    const [fnArgs, overrides = {}] = splitFnArgs<[Overrides?]>(func, args);\n    const call = {\n      contract,\n      func,\n      args: fnArgs,\n      options: overrides,\n    };\n    const request = await buildTransaction([call], {\n      ...overrides,\n      fundTransaction: true,\n    });\n    const response = await contract.wallet.sendTransaction(request);\n    const result = await response.waitForResult();\n    return result;\n  };\n\nconst buildSubmit = (contract: Contract, func: FunctionFragment): ContractFunction<any> =>\n  async function submit(...args: Array<any>): Promise<any> {\n    const result = await buildSubmitTransaction(contract, func).apply(contract, args);\n    const encodedResults = contractCallScript.decodeCallResult(result);\n    const encodedResult = encodedResults[0];\n    const returnValue = contract.interface.decodeFunctionResult(func, encodedResult)?.[0];\n\n    return returnValue;\n  };\n\nconst buildSimulateTransaction = (\n  contract: Contract,\n  func: FunctionFragment\n): ContractFunction<CallResult> =>\n  async function submitTransaction(...args: Array<any>): Promise<any> {\n    if (!contract.wallet) {\n      return logger.throwArgumentError('Cannot call without wallet', 'wallet', contract.wallet);\n    }\n\n    const [fnArgs, overrides = {}] = splitFnArgs<[Overrides?]>(func, args);\n    const call = {\n      contract,\n      func,\n      args: fnArgs,\n      options: overrides,\n    };\n    const request = await buildTransaction([call], {\n      ...overrides,\n      fundTransaction: true,\n    });\n    return contract.wallet.simulateTransaction(request);\n  };\n\nconst buildSimulate = (contract: Contract, func: FunctionFragment): ContractFunction<any> =>\n  async function simulate(...args: Array<any>): Promise<any> {\n    const result = await buildSimulateTransaction(contract, func).apply(contract, args);\n    const encodedResults = contractCallScript.decodeCallResult(result);\n    const encodedResult = encodedResults[0];\n    const returnValue = contract.interface.decodeFunctionResult(func, encodedResult)?.[0];\n\n    return returnValue;\n  };\n\nexport default class Contract extends AbstractContract {\n  interface!: Interface;\n  id!: string;\n  provider!: Provider | null;\n  wallet!: Wallet | null;\n  transaction?: string;\n  request?: TransactionRequest;\n  // Keyable functions\n  prepareCall!: { [key: string]: (...args: any[]) => ContractCall };\n  dryRun!: { [key: string]: ContractFunction<any> };\n  dryRunResult!: { [key: string]: ContractFunction<CallResult> };\n  submit!: { [key: string]: ContractFunction<any> };\n  submitResult!: { [key: string]: ContractFunction<TransactionResult<any>> };\n  simulate!: { [key: string]: ContractFunction<any> };\n  simulateResult!: { [key: string]: ContractFunction<CallResult> };\n\n  constructor(\n    id: string,\n    abi: JsonAbi | Interface,\n    walletOrProvider: Wallet | Provider | null = null,\n    transactionId?: string,\n    request?: TransactionRequest\n  ) {\n    super();\n    this.interface = abi instanceof Interface ? abi : new Interface(abi);\n    this.id = id;\n    this.transaction = transactionId;\n    this.request = request;\n\n    if (walletOrProvider instanceof Wallet) {\n      this.provider = walletOrProvider.provider;\n      this.wallet = walletOrProvider;\n    } else if (walletOrProvider instanceof Provider) {\n      this.provider = walletOrProvider;\n      this.wallet = null;\n    } else {\n      this.provider = null;\n      this.wallet = null;\n    }\n\n    this.dryRun = {};\n    this.dryRunResult = {};\n    this.submit = {};\n    this.submitResult = {};\n    this.prepareCall = {};\n    this.simulate = {};\n    this.simulateResult = {};\n\n    Object.keys(this.interface.functions).forEach((name) => {\n      const fragment = this.interface.getFunction(name);\n      Object.defineProperty(this.prepareCall, fragment.name, {\n        value: buildPrepareCall(this, fragment),\n        writable: false,\n      });\n      Object.defineProperty(this.submit, fragment.name, {\n        value: buildSubmit(this, fragment),\n        writable: false,\n      });\n      Object.defineProperty(this.submitResult, fragment.name, {\n        value: buildSubmitTransaction(this, fragment),\n        writable: false,\n      });\n      Object.defineProperty(this.dryRun, fragment.name, {\n        value: buildDryRun(this, fragment),\n        writable: false,\n      });\n      Object.defineProperty(this.dryRunResult, fragment.name, {\n        value: buildDryRunTransaction(this, fragment),\n        writable: false,\n      });\n      Object.defineProperty(this.simulateResult, fragment.name, {\n        value: buildSimulateTransaction(this, fragment),\n        writable: false,\n      });\n      Object.defineProperty(this.simulate, fragment.name, {\n        value: buildSimulate(this, fragment),\n        writable: false,\n      });\n    });\n  }\n\n  async dryRunMulticall(\n    calls: ContractCall[],\n    options: BuildTransactionOptions = {}\n  ): Promise<any[]> {\n    if (!this.provider) {\n      return logger.throwArgumentError('Cannot call without provider', 'provider', this.provider);\n    }\n    const request = await buildTransaction(calls, options);\n    const result = await this.provider.call(request, {\n      utxoValidation: false,\n    });\n    const encodedResults = contractCallScript.decodeCallResult(result);\n    const returnValues = encodedResults.map((encodedResult, i) => {\n      const func = calls[i].func;\n      return this.interface.decodeFunctionResult(func, encodedResult)?.[0];\n    });\n    return returnValues;\n  }\n\n  async submitMulticall(\n    calls: ContractCall[],\n    options: BuildTransactionOptions = {}\n  ): Promise<any[]> {\n    if (!this.wallet) {\n      return logger.throwArgumentError('Cannot call without wallet', 'wallet', this.wallet);\n    }\n    const request = await buildTransaction(calls, {\n      fundTransaction: true,\n      ...options,\n    });\n    const response = await this.wallet.sendTransaction(request);\n    const result = await response.waitForResult();\n    const encodedResults = contractCallScript.decodeCallResult(result);\n    const returnValues = encodedResults.map((encodedResult, i) => {\n      const func = calls[i].func;\n      return this.interface.decodeFunctionResult(func, encodedResult)?.[0];\n    });\n    return returnValues;\n  }\n\n  async simulateMulticall(\n    calls: ContractCall[],\n    options: BuildTransactionOptions = {}\n  ): Promise<CallResult> {\n    if (!this.wallet) {\n      return logger.throwArgumentError('Cannot call without wallet', 'wallet', this.wallet);\n    }\n    const request = await buildTransaction(calls, {\n      fundTransaction: true,\n      ...options,\n    });\n    return this.wallet.simulateTransaction(request);\n  }\n}\n","import type { BytesLike } from '@ethersproject/bytes';\nimport { arrayify, concat } from '@ethersproject/bytes';\nimport type { ArrayCoder, StructCoder } from '@fuel-ts/abi-coder';\nimport { AbiCoder, NumberCoder } from '@fuel-ts/abi-coder';\nimport { NativeAssetId } from '@fuel-ts/constants';\nimport type { BigNumberish } from '@fuel-ts/math';\nimport { ReceiptType } from '@fuel-ts/providers';\nimport { Script } from '@fuel-ts/script';\n\nimport contractCallScriptAbi from './multicall/out/debug/multicall-abi.json';\nimport contractCallScriptBin from './multicall/out/debug/multicall-bin';\n\nexport type ContractCall = {\n  contractId: BytesLike;\n  data: BytesLike;\n  amount?: BigNumberish;\n  assetId?: BytesLike;\n  gas?: BigNumberish;\n};\n\n/**\n * A script that calls contracts\n *\n * Accepts a contract ID and function data\n * Returns function result\n */\nexport const contractCallScript = new Script<ContractCall[], Uint8Array[]>(\n  // Script to call the contract\n  contractCallScriptBin,\n  (contractCalls) => {\n    const inputs = contractCallScriptAbi[0].inputs;\n    const scriptDataCoder = new AbiCoder().getCoder(inputs[0]) as StructCoder<any>;\n    const callSlotsLength = (scriptDataCoder.coders.calls as ArrayCoder<any>).length;\n\n    if (contractCalls.length > callSlotsLength) {\n      throw new Error(`At most ${callSlotsLength} calls are supported`);\n    }\n\n    let refArgData = new Uint8Array();\n\n    const scriptCallSlots = [];\n    for (let i = 0; i < callSlotsLength; i += 1) {\n      const call = contractCalls[i];\n\n      let scriptCallSlot;\n      if (call) {\n        // Decode data in internal format\n        const dataArray = arrayify(call.data);\n        const functionSelector = dataArray.slice(0, 8);\n        const isReferenceType = dataArray.slice(8, 16).some((b) => b === 0x01);\n        const args = dataArray.slice(16);\n\n        let fnArg;\n        if (isReferenceType) {\n          fnArg = { Reference: refArgData.length };\n          refArgData = concat([refArgData, args]);\n        } else {\n          fnArg = { Value: new NumberCoder('u64').decode(args, 0)[0] };\n        }\n\n        const scriptCall = {\n          contract_id: { value: call.contractId },\n          fn_selector: new NumberCoder('u64').decode(functionSelector, 0)[0],\n          fn_arg: fnArg,\n          amount: BigInt(call.amount ?? 0),\n          asset_id: call.assetId || NativeAssetId,\n        };\n\n        scriptCallSlot = { Some: scriptCall };\n      } else {\n        scriptCallSlot = { None: [] };\n      }\n\n      scriptCallSlots.push(scriptCallSlot);\n    }\n\n    const scriptData = {\n      calls: scriptCallSlots,\n    };\n\n    const encodedScriptData = scriptDataCoder.encode(scriptData as any);\n    return concat([encodedScriptData, refArgData]);\n  },\n  (result) => {\n    if (result.code !== 0n) {\n      throw new Error(`Script returned non-zero result: ${result.code}`);\n    }\n    if (result.returnReceipt.type !== ReceiptType.ReturnData) {\n      throw new Error(`Expected returnReceipt to be a ReturnDataReceipt`);\n    }\n    const encodedScriptReturn = arrayify(result.returnReceipt.data);\n    const outputs = contractCallScriptAbi[0].outputs;\n    const scriptDataCoder = new AbiCoder().getCoder(outputs[0]) as StructCoder<any>;\n    const [scriptReturn, scriptReturnLength] = scriptDataCoder.decode(encodedScriptReturn, 0);\n    const returnData = encodedScriptReturn.slice(scriptReturnLength);\n\n    const contractCallResults: any[] = [];\n    (scriptReturn.call_returns as any[]).forEach((callResult, i) => {\n      if (callResult.Some) {\n        if (callResult.Some.Reference) {\n          const [offset, length] = callResult.Some.Reference;\n          contractCallResults[i] = returnData.slice(Number(offset), Number(offset + length));\n        } else {\n          contractCallResults[i] = new NumberCoder('u64').encode(callResult.Some.Value);\n        }\n      }\n    });\n\n    return contractCallResults;\n  }\n);\n","export default '0x90000004470000000000000000000b905dfcc00110fff3001a605000910006685d43f00e104103005d47f0045d43f0055d41000010451400504183005f6110605d43f0067340001390000016504183005d41806090000019504183005d4180605d4100005045836050458360604502085d47f0045d43f0055d41000010451400504183085f611061504183085d4580615d43f00710450440504183205f6110645d43f0085d4500005d43f00720451400504182605f61104c504183205d498064504182605d41804c1a445000910000105f4520005f4500015041865850418658604110105d47f00926440000504470015041817850418178604110a05d43f00a26400000504070011a445000910000105f4500005d43f00a5f450001504183505041835060411010504182505d43f00a5f61004a50418360504100005d47f0075d43f00b12451400504182185f611043504182505d45804a504182185d418043164114007340005b9000024d5041836050490000504182505d41804a5545006810452440504180185041801860411068504180185d4500005d43f00a134114007340006a9000021e5041801850450008504180e8504180e860411060504180e850450028504180805041808060411010504180805d4500005d43f00a134114007340007a90000086504180805d450001504180a85f611015504180a85d4980151a445000910000105d43f00a5f4500005f452001900000a9504180805d4500005d43f00c134114007340008c9000009b504180805d450001504182b85f611057504186585d450000504182b85d418057104904401a445000910000105d43f00c5f4500005f452001900000a9504180805d450001504182c05f611058504186585d450000504182c05d418058104904401a445000910000105d43f00c5f4500005f452001504182205041822060411010504180e850590000504180e85d55000450458220504180e85d510007504180e8504d00401a5ca000504180005041800060411010504180005d4500005d43f00a13411400734000bf900000c6504180005d450001504180b05f611016504180b05d458016900000d9504180005d4500005d43f00c13411400734000cc900000d3504180005d450001504183105f611062504183105d458062900000d9504180005d450001504183285f611065504183285d458065504182305f611046504182305d4980461a4450009100003050411000604160205f4550045f452005504181485041814860411030504181482d4144d71a44e000504180105f611002504180105d4580025d43f00a13411400734000f1900000fc1a44d000504186285f6110c5504186285d4980c51a445000910000185d43f00a5f4500005f45200290000111504180105d458002504182685f61104d1a44d000504183305f611066504183305d458066504182685d41804d1a485000910000105f4910005f4900011a445000910000185d43f00c5f450000504110086041201050418338504183386041101850458338504180905041809060411018504180905d4500005d43f00a134114007340011e9000012a504180905d450002504186505f6110ca504186505d4980ca1a445000910000185d43f00a5f4500005f452002900001ef504180905d4500005d43f00c13411400734001309000019050418090504100085d450000504182f85f61105f50418090504100085d450001504182585f61104b504182f85d45805f504182585d41804b1a485000910000105f4910005f490001504180b8504180b86041201050558350505180b85d4540015d43f00a134114007340014c900001505d4550019000017f5d43f00a900001515d43f00a5d455001504182d85f61105b5d4550015d41400110450440504182985f6110535d4d50005d495001504182985d4580531541148073400160900001712644000050447001504182785f61104f5d43f00a15412400734001689000016d504182785d41804f284134805d43f00a9000016e5d43f00a504182785d4d804f900001715f553000504182985d4180535f5500015d455000504182d85d41805b104904405d4540005d414001284914005d43f00a504182d85d45805b504182c85f611059504182c85d458059504182585d41804b1a485000910000105f4910005f4900011a445000910000185d43f00c5f4500005041100860412010900001ef50418090504100085d450000504183185f61106350418090504100085d450001504182705f61104e504183185d458063504182705d41804e1a485000910000105f4910005f490001504180c8504180c86041201050558350505180c85d4540015d43f00a13411400734001ac900001b05d455001900001df5d43f00a900001b15d43f00a5d455001504182e05f61105c5d4550015d41400110450440504182a05f6110545d4d50005d495001504182a05d45805415411480734001c0900001d12644000050447001504182805f6110505d43f00a15412400734001c8900001cd504182805d418050284134805d43f00a900001ce5d43f00a504182805d4d8050900001d15f553000504182a05d4180545f5500015d455000504182e05d41805c104904405d4540005d414001284914005d43f00a504182e05d45805c504182d05f61105a504182d05d45805a504182705d41804e1a485000910000105f4910005f4900011a445000910000185d43f00c5f4500005041100860412010504182385041823860411018504982381a445000910000205d43f00a5f450000504110086041201850418608504186086041102050458178504182505d41804a55490020104914805d43f0061341000073400205900002095d43f00a364000005d43f00a9000020a5d43f00a504586085d43f0067340020e9000021b5d43f0061341000073400212900002165d43f00a364000005d43f00a900002175d43f00a5d43f00d284914005d43f00a9000021c5f4910005d43f00a90000246504186301a445000910000205d43f00c5f450000504186306041102050458178504182505d41804a55490020104914805d43f006134100007340022e900002325d43f00a364000005d43f00a900002335d43f00a504586305d43f00673400237900002445d43f006134100007340023b9000023f5d43f00a364000005d43f00a900002405d43f00a5d43f00d284914005d43f00a900002455f4910005d43f00a50418250504182505d45804a5d43f00c104104405f61004a90000054504981781a445000910000a050411000604120a05041856850418568604110a05d43f00a26400000504070011a445000910000105f4500005d43f00a5f450001504180d8504180d860411010505980d8505585685d43f00613410000734002669000026a5d43f00a364000005d43f00a9000026b5d43f00a504185685d53f0095d43f00a1341440073400271900002755d416001900002a15d43f00a900002765d43f00a5d456001504182e85f61105d5d41600110454400504182a85f6110555d4d60005d496001504182a85d4580551541148073400284900002952644000050447001504182885f6110515d43f00a154124007340028c90000291504182885d418051284134805d43f00a900002925d43f00a504182885d4d8051900002955f593000504182a85d4180555f5900015d456000504182e85d41805d10410440284155005d43f00a504182e85d41805d505580d8505183505d4540015d43f00a13411400734002a8900002ac5d415001900002db5d43f00a900002ad5d43f00a5d455001504182f05f61105e5d4550015d41400110450440504182b05f6110565d4d50005d495001504182b05d45805615411480734002bc900002cd2644000050447001504182905f6110525d43f00a15412400734002c4900002c9504182905d418052284134805d43f00a900002ca5d43f00a504182905d4d8052900002cd5f553000504182b05d4180565f5500015d455000504182f05d41805e104904405d4540005d414001284914005d43f00a504182f05d41805e504180d85d450000504180d85d41000125450000504585685d43f009254500004700000000000000000000000000000000000000000000000000000000000000000000000000000000002870000000000000282800000000000000010000000000000208000000000000283000000000000000a000000000000000000000000000000068000000000000000100000000000000200000000000000b90';\n","import type { BytesLike } from '@ethersproject/bytes';\nimport { Logger } from '@ethersproject/logger';\nimport { Interface } from '@fuel-ts/abi-coder';\nimport type { JsonAbi } from '@fuel-ts/abi-coder';\nimport { ZeroBytes32 } from '@fuel-ts/constants';\nimport { randomBytes } from '@fuel-ts/keystore';\nimport type { CreateTransactionRequestLike } from '@fuel-ts/providers';\nimport { Provider, CreateTransactionRequest } from '@fuel-ts/providers';\nimport { Wallet } from '@fuel-ts/wallet';\n\nimport Contract from './contract';\nimport { getContractId } from './util';\n\nconst logger = new Logger(process.env.BUILD_VERSION || '~');\n\ntype DeployContractOptions = {\n  salt?: BytesLike;\n  storageSlots?: Array<[BytesLike, BytesLike]>;\n  stateRoot?: BytesLike;\n} & CreateTransactionRequestLike;\n\nexport default class ContractFactory {\n  bytecode: BytesLike;\n  interface: Interface;\n  provider!: Provider | null;\n  wallet!: Wallet | null;\n\n  constructor(\n    bytecode: BytesLike,\n    abi: JsonAbi | Interface,\n    walletOrProvider: Wallet | Provider | null = null\n  ) {\n    this.bytecode = bytecode;\n\n    if (abi instanceof Interface) {\n      this.interface = abi;\n    } else {\n      this.interface = new Interface(abi);\n    }\n\n    if (walletOrProvider instanceof Wallet) {\n      this.provider = walletOrProvider.provider;\n      this.wallet = walletOrProvider;\n    } else if (walletOrProvider instanceof Provider) {\n      this.provider = walletOrProvider;\n      this.wallet = null;\n    } else {\n      this.provider = null;\n      this.wallet = null;\n    }\n  }\n\n  connect(provider: Provider | null) {\n    return new ContractFactory(this.bytecode, this.interface, provider);\n  }\n\n  async deployContract(deployContractOptions?: DeployContractOptions) {\n    if (!this.wallet) {\n      return logger.throwArgumentError('Cannot deploy without wallet', 'wallet', this.wallet);\n    }\n    const options = {\n      salt: randomBytes(32),\n      storageSlots: [],\n      ...deployContractOptions,\n    };\n\n    // If storage slot is zero it should return zero and\n    // as contract stateRoot is different form the receiptsState Root\n    // https://github.com/FuelLabs/fuel-specs/blob/master/specs/protocol/tx_format.md#transactioncreate\n    // const stateRoot = options.stateRoot || getContractStorageRoot(options.storageSlots);\n    // TODO: https://github.com/FuelLabs/fuels-ts/issues/334\n    const stateRoot = ZeroBytes32;\n    const contractId = getContractId(this.bytecode, options.salt, stateRoot);\n    const request = new CreateTransactionRequest({\n      gasPrice: 0,\n      gasLimit: 1_000_000,\n      bytePrice: 0,\n      bytecodeWitnessIndex: 0,\n      witnesses: [this.bytecode],\n      ...options,\n    });\n    request.addContractCreatedOutput(contractId, stateRoot);\n    await this.wallet.fund(request);\n    const response = await this.wallet.sendTransaction(request);\n\n    await response.wait();\n\n    return new Contract(contractId, this.interface, this.wallet, response.id, response.request);\n  }\n}\n","import type { BytesLike } from '@ethersproject/bytes';\nimport { hexlify, arrayify, concat } from '@ethersproject/bytes';\nimport { sha256 } from '@ethersproject/sha2';\nimport { ZeroBytes32 } from '@fuel-ts/constants';\nimport { calcRoot } from '@fuel-ts/merkle';\n\nexport const getContractRoot = (bytecode: Uint8Array): string => {\n  const chunkSize = 8;\n  const chunks: Uint8Array[] = [];\n  for (let offset = 0; offset < bytecode.length; offset += chunkSize) {\n    const chunk = new Uint8Array(chunkSize);\n    chunk.set(bytecode.slice(offset, offset + chunkSize));\n    chunks.push(chunk);\n  }\n  return calcRoot(chunks.map((c) => hexlify(c)));\n};\n\nexport const getContractStorageRoot = (storageSlots: [BytesLike, BytesLike][]): string => {\n  const KEY_SIZE = 32;\n  const VALUE_SIZE = 32;\n  const chunks: Uint8Array[] = [];\n\n  // eslint-disable-next-line no-restricted-syntax\n  for (const [key, value] of storageSlots) {\n    const chunk = new Uint8Array(KEY_SIZE + VALUE_SIZE);\n    chunk.set(arrayify(key));\n    chunk.set(arrayify(value), KEY_SIZE);\n    chunks.push(chunk);\n  }\n\n  return calcRoot(chunks.map((c) => hexlify(c)));\n};\n\nexport const getContractId = (\n  bytecode: BytesLike,\n  salt: BytesLike,\n  stateRoot: BytesLike\n): string => {\n  const root = getContractRoot(arrayify(bytecode));\n  const contractId = sha256(concat(['0x4655454C', salt, root, stateRoot]));\n  return contractId;\n};\n"],"mappings":"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","names":[]}