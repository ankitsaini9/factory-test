{"version":3,"sources":["../src/index.ts","../src/convert.ts"],"sourcesContent":["export * from './convert';\nexport * from './types';\n","/* eslint-disable no-restricted-syntax */\n/**\n * From: https://github.dev/ethers-io/ethers.js/blob/9ca3dc557de8d1556096ea4140316e7f7711a0f3/packages/math/src.ts/convert.ts\n */\n\nimport type { BigNumberish } from './types';\n\n// IEEE 754 support 53-bits of mantissa\nconst maxValue = 0x1fffffffffffff;\n\nconst nibbles = '0123456789abcdef';\n\n// Converts a value to a BigInt, including big endian data\nexport function toBigInt(_value: BigNumberish | Uint8Array): bigint {\n  if (_value instanceof Uint8Array) {\n    let result = '0x0';\n    for (const v of _value) {\n      result += nibbles[v >> 4];\n      result += nibbles[v & 0x0f];\n    }\n    return BigInt(result);\n  }\n  return BigInt(_value);\n}\n\nexport function toNumber(_value: BigNumberish | Uint8Array): number {\n  const value = toBigInt(_value);\n  if (value < -maxValue || value > maxValue) {\n    throw new Error(`Value out of range: ${_value}`);\n  }\n  return Number(value);\n}\n\n// Converts value to hex, optionally padding on the left to width bytes\nexport function toHex(_value: BigNumberish, width?: number): string {\n  const value = BigInt(_value);\n  if (value < 0) {\n    throw new Error('cannot convert negative value to hex');\n  }\n\n  let result = value.toString(16);\n\n  if (width == null) {\n    // Ensure the value is of even length\n    if (result.length % 2) {\n      result = `0${result}`;\n    }\n  } else {\n    if (width * 2 < result.length) {\n      throw new Error(`value ${value} exceeds width ${width}`);\n    }\n\n    // Pad the value to the required width\n    while (result.length < width * 2) {\n      result = `0${result}`;\n    }\n  }\n\n  return `0x${result}`;\n}\n\nexport function toArray(_value: BigNumberish): Uint8Array {\n  const value = BigInt(_value);\n  if (value < 0) {\n    throw new Error('cannot convert negative value to hex');\n  }\n\n  if (value === 0n) {\n    return new Uint8Array([]);\n  }\n\n  let hex = value.toString(16);\n  if (hex.length % 2) {\n    hex = `0${hex}`;\n  }\n\n  const result = new Uint8Array(hex.length / 2);\n  for (let i = 0; i < result.length; i += 1) {\n    const offset = i * 2;\n    result[i] = parseInt(hex.substring(offset, offset + 2), 16);\n  }\n\n  return result;\n}\n"],"mappings":"4ZAAA,4FCUA,GAAM,GAAU,mBAGT,WAAkB,EAA2C,CAClE,GAAI,YAAkB,YAAY,CAChC,GAAI,GAAS,MACb,OAAW,KAAK,GACd,GAAU,EAAQ,GAAK,GACvB,GAAU,EAAQ,EAAI,IAExB,MAAO,QAAO,CAAM,CACtB,CACA,MAAO,QAAO,CAAM,CACtB,CAEO,WAAkB,EAA2C,CAClE,GAAM,GAAQ,EAAS,CAAM,EAC7B,GAAI,EAAQ,mBAAa,EAAQ,iBAC/B,KAAM,IAAI,OAAM,uBAAuB,GAAQ,EAEjD,MAAO,QAAO,CAAK,CACrB,CAGO,WAAe,EAAsB,EAAwB,CAClE,GAAM,GAAQ,OAAO,CAAM,EAC3B,GAAI,EAAQ,EACV,KAAM,IAAI,OAAM,sCAAsC,EAGxD,GAAI,GAAS,EAAM,SAAS,EAAE,EAE9B,GAAI,GAAS,KAEX,AAAI,EAAO,OAAS,GAClB,GAAS,IAAI,SAEV,CACL,GAAI,EAAQ,EAAI,EAAO,OACrB,KAAM,IAAI,OAAM,SAAS,mBAAuB,GAAO,EAIzD,KAAO,EAAO,OAAS,EAAQ,GAC7B,EAAS,IAAI,GAEjB,CAEA,MAAO,KAAK,GACd,CAEO,WAAiB,EAAkC,CACxD,GAAM,GAAQ,OAAO,CAAM,EAC3B,GAAI,EAAQ,EACV,KAAM,IAAI,OAAM,sCAAsC,EAGxD,GAAI,IAAU,GACZ,MAAO,IAAI,YAAW,CAAC,CAAC,EAG1B,GAAI,GAAM,EAAM,SAAS,EAAE,EAC3B,AAAI,EAAI,OAAS,GACf,GAAM,IAAI,KAGZ,GAAM,GAAS,GAAI,YAAW,EAAI,OAAS,CAAC,EAC5C,OAAS,GAAI,EAAG,EAAI,EAAO,OAAQ,GAAK,EAAG,CACzC,GAAM,GAAS,EAAI,EACnB,EAAO,GAAK,SAAS,EAAI,UAAU,EAAQ,EAAS,CAAC,EAAG,EAAE,CAC5D,CAEA,MAAO,EACT","names":[]}