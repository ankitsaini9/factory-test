{"version":3,"sources":["../src/index.ts","../src/hdwallet.ts"],"sourcesContent":["export { default as HDWallet } from './hdwallet';\n","import { Base58 } from '@ethersproject/basex';\nimport type { BytesLike } from '@ethersproject/bytes';\nimport { hexDataSlice, hexlify, concat, hexZeroPad, arrayify } from '@ethersproject/bytes';\nimport { computeHmac, ripemd160, sha256, SupportedAlgorithm } from '@ethersproject/sha2';\nimport { toBigInt } from '@fuel-ts/math';\nimport { Mnemonic } from '@fuel-ts/mnemonic';\nimport { Signer } from '@fuel-ts/signer';\n\n// \"Bitcoin seed\"\nconst HARDENED_INDEX = 0x80000000;\n\n// 4 byte: version bytes (mainnet: 0x0488B21E public, 0x0488ADE4 private; testnet: 0x043587CF public, 0x04358394 private)\nconst MainnetPRV = hexlify('0x0488ade4');\nconst MainnetPUB = hexlify('0x0488b21e');\nconst TestnetPRV = hexlify('0x04358394');\nconst TestnetPUB = hexlify('0x043587cf');\n\nfunction base58check(data: Uint8Array): string {\n  return Base58.encode(concat([data, hexDataSlice(sha256(sha256(data)), 0, 4)]));\n}\n\nfunction getExtendedKeyPrefix(isPublic: boolean = false, testnet: boolean = false) {\n  if (isPublic) {\n    return testnet ? TestnetPUB : MainnetPUB;\n  }\n  return testnet ? TestnetPRV : MainnetPRV;\n}\n\nfunction isPublicExtendedKey(extendedKey: Uint8Array) {\n  return [MainnetPUB, TestnetPUB].includes(hexlify(extendedKey.slice(0, 4)));\n}\n\nfunction isValidExtendedKey(extendedKey: Uint8Array) {\n  return [MainnetPRV, TestnetPRV, MainnetPUB, TestnetPUB].includes(\n    hexlify(extendedKey.slice(0, 4))\n  );\n}\n\nfunction parsePath(path: string, depth: number = 0) {\n  const components = path.split('/');\n\n  if (components.length === 0 || (components[0] === 'm' && depth !== 0)) {\n    throw new Error(`invalid path - ${path}`);\n  }\n\n  if (components[0] === 'm') {\n    components.shift();\n  }\n\n  return components.map((p) =>\n    ~p.indexOf(`'`) ? parseInt(p, 10) + HARDENED_INDEX : parseInt(p, 10)\n  );\n}\n\nfunction to4Bytes(v: number) {\n  const data = new Uint8Array(4);\n\n  for (let i = 24; i >= 0; i -= 8) {\n    data[0 + (i >> 3)] = (v >> (24 - i)) & 0xff;\n  }\n\n  return data;\n}\n\ntype HDWalletConfig = {\n  privateKey?: BytesLike;\n  publicKey?: BytesLike;\n  chainCode: BytesLike;\n  depth?: number;\n  index?: number;\n  parentFingerprint?: string;\n};\n\nclass HDWallet {\n  depth: number = 0;\n  index: number = 0;\n  fingerprint: string = hexlify('0x00000000');\n  parentFingerprint: string = hexlify('0x00000000');\n  privateKey?: string;\n  publicKey: string;\n  chainCode: BytesLike;\n\n  /**\n   * HDWallet is a implementation of the BIP-0044 and BIP-0032, Multi-Account Hierarchy for Deterministic Wallets\n   *\n   * @param config - Wallet configurations\n   */\n  constructor(config: HDWalletConfig) {\n    // TODO: set some asserts here\n\n    if (config.privateKey) {\n      const signer = new Signer(config.privateKey);\n      this.publicKey = hexlify(signer.compressedPublicKey);\n      this.privateKey = hexlify(config.privateKey);\n    } else {\n      if (!config.publicKey) {\n        throw new Error('Public and Private Key are missing!');\n      }\n      this.publicKey = hexlify(config.publicKey);\n    }\n\n    this.parentFingerprint = config.parentFingerprint || this.parentFingerprint;\n    this.fingerprint = hexDataSlice(ripemd160(sha256(this.publicKey)), 0, 4);\n    this.depth = config.depth || this.depth;\n    this.index = config.index || this.index;\n    this.chainCode = config.chainCode;\n  }\n\n  get extendedKey() {\n    return this.toExtendedKey();\n  }\n\n  /**\n   * Derive the current HDWallet instance navigating only on the index.\n   * `Ex.: m/44'/0 -> Ex.: m/44'/1 -> m/44'/2`. [Learn more](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki)\n   *\n   * @param index - Index of the child HDWallet.\n   * @returns A new instance of HDWallet on the derived index\n   */\n  deriveIndex(index: number) {\n    const privateKey = this.privateKey && arrayify(this.privateKey);\n    const publicKey = arrayify(this.publicKey);\n    const chainCode = arrayify(this.chainCode);\n    const data = new Uint8Array(37);\n\n    if (index & HARDENED_INDEX) {\n      if (!privateKey) {\n        throw new Error('Derive hardened requires privateKey');\n      }\n\n      // 33 bytes: 0x00 || private key\n      data.set(privateKey, 1);\n    } else {\n      data.set(arrayify(this.publicKey));\n    }\n\n    // child number: ser32(i)\n    data.set(to4Bytes(index), 33);\n\n    const bytes = arrayify(computeHmac(SupportedAlgorithm.sha512, chainCode, data));\n    const IL = bytes.slice(0, 32);\n    const IR = bytes.slice(32);\n\n    if (privateKey) {\n      const N = BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141');\n      // Child key ki is parse256(IL) + kpar (mod n).\n      const ki = arrayify(hexZeroPad(hexlify((toBigInt(IL) + toBigInt(privateKey)) % N), 32));\n\n      return new HDWallet({\n        privateKey: ki,\n        chainCode: IR,\n        index,\n        depth: this.depth + 1,\n        parentFingerprint: this.fingerprint,\n      });\n    }\n\n    const signer = new Signer(hexlify(IL));\n    const Ki = signer.addPoint(publicKey);\n\n    return new HDWallet({\n      publicKey: Ki,\n      chainCode: IR,\n      index,\n      depth: this.depth + 1,\n      parentFingerprint: this.fingerprint,\n    });\n  }\n\n  /**\n   * Derive the current HDWallet instance to the path. [Learn more](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki)\n   *\n   * @param path - The string representation of the child HDWallet. `Ex.: m/44'/0'/0'/0/0`\n   * @returns A new instance of HDWallet on the derived path\n   */\n  derivePath(path: string) {\n    const paths = parsePath(path, this.depth);\n\n    return paths.reduce((hdwallet, index) => hdwallet.deriveIndex(index), <HDWallet>this);\n  }\n\n  /**\n   * Get the extendKey as defined on BIP-32 from the provided seed\n   *\n   * @param isPublic - enable to export public extendedKey, it not required when HDWallet didn't have the privateKey.\n   * @param testnet - Inform if should use testnet or mainnet prefix, default value is true (`mainnet`).\n   * @returns BIP-32 extended private key\n   */\n  toExtendedKey(isPublic: boolean = false, testnet: boolean = false): string {\n    if (this.depth >= 256) {\n      throw new Error('Depth too large!');\n    }\n    const prefix = getExtendedKeyPrefix(this.privateKey == null || isPublic, testnet);\n    const depth = hexlify(this.depth);\n    const parentFingerprint = this.parentFingerprint;\n    const index = hexZeroPad(hexlify(this.index), 4);\n    // last 32 bites from the key\n    const chainCode = this.chainCode;\n    // first 32 bites from the key\n    const key =\n      this.privateKey != null && !isPublic ? concat(['0x00', this.privateKey]) : this.publicKey;\n    const extendedKey = concat([prefix, depth, parentFingerprint, index, chainCode, key]);\n\n    return base58check(extendedKey);\n  }\n\n  /**\n   * Create HDWallet instance from seed\n   *\n   * @param seed - Seed\n   * @returns A new instance of HDWallet\n   */\n  static fromSeed(seed: string) {\n    const masterKey = Mnemonic.masterKeysFromSeed(seed);\n\n    return new HDWallet({\n      chainCode: arrayify(masterKey.slice(32)),\n      privateKey: arrayify(masterKey.slice(0, 32)),\n    });\n  }\n\n  static fromExtendedKey(extendedKey: string) {\n    const bytes = Base58.decode(extendedKey);\n    const validChecksum = base58check(bytes.slice(0, 78)) === extendedKey;\n\n    if (bytes.length !== 82 || !isValidExtendedKey(bytes)) {\n      throw new Error('Invalid extended key');\n    }\n    if (!validChecksum) throw new Error('Invalid checksum key');\n\n    const depth = bytes[4];\n    const parentFingerprint = hexlify(bytes.slice(5, 9));\n    const index = parseInt(hexlify(bytes.slice(9, 13)).substring(2), 16);\n    const chainCode = hexlify(bytes.slice(13, 45));\n    const key = bytes.slice(45, 78);\n\n    if ((depth === 0 && parentFingerprint !== '0x00000000') || (depth === 0 && index !== 0)) {\n      throw new Error('Invalid depth');\n    }\n\n    if (isPublicExtendedKey(bytes)) {\n      if (key[0] !== 3) {\n        throw new Error('Invalid public extended key');\n      }\n\n      return new HDWallet({\n        publicKey: key,\n        chainCode,\n        index,\n        depth,\n        parentFingerprint,\n      });\n    }\n\n    if (key[0] !== 0) {\n      throw new Error('Invalid private extended key');\n    }\n\n    return new HDWallet({\n      privateKey: key.slice(1),\n      chainCode,\n      index,\n      depth,\n      parentFingerprint,\n    });\n  }\n}\n\nexport default HDWallet;\n"],"mappings":"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","names":[]}