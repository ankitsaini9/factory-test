{"version":3,"sources":["../src/index.ts"],"sourcesContent":["/* eslint-disable max-classes-per-file */\nimport { hexlify } from '@ethersproject/bytes';\nimport type { BytesLike } from '@ethersproject/bytes';\n\nexport type Address = string;\nexport type ContractId = string;\n\nexport abstract class AbstractScript<T> {\n  abstract bytes: Uint8Array;\n  abstract encodeScriptData: (data: T) => Uint8Array;\n}\n\nexport abstract class AbstractContract {\n  abstract id: ContractId;\n}\n\nexport abstract class AbstractWallet {\n  abstract address: string;\n}\n\nexport type AddressLike = Address | BytesLike | AbstractWallet;\n\nexport const addressify = (addressLike: AddressLike): Address => {\n  if (addressLike instanceof AbstractWallet) {\n    return addressLike.address;\n  }\n  return hexlify(addressLike);\n};\n\nexport type ContractIdLike = ContractId | BytesLike | AbstractContract;\n\nexport const contractIdify = (contractIdLike: ContractIdLike): ContractId => {\n  if (contractIdLike instanceof AbstractContract) {\n    return contractIdLike.id;\n  }\n  return hexlify(contractIdLike);\n};\n"],"mappings":"AACA,+CAMO,WAAiC,CAGxC,EAEO,OAAgC,CAEvC,EAEO,OAA8B,CAErC,EAIa,EAAa,AAAC,GACrB,YAAuB,GAClB,EAAY,QAEd,EAAQ,CAAW,EAKf,EAAgB,AAAC,GACxB,YAA0B,GACrB,EAAe,GAEjB,EAAQ,CAAc","names":[]}