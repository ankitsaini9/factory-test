var qt=Object.defineProperty,bt=Object.defineProperties;var xt=Object.getOwnPropertyDescriptors;var R=Object.getOwnPropertySymbols;var J=Object.prototype.hasOwnProperty,X=Object.prototype.propertyIsEnumerable;var z=(r,e,t)=>e in r?qt(r,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):r[e]=t,s=(r,e)=>{for(var t in e||(e={}))J.call(e,t)&&z(r,t,e[t]);if(R)for(var t of R(e))X.call(e,t)&&z(r,t,e[t]);return r},u=(r,e)=>bt(r,xt(e));var E=(r,e)=>{var t={};for(var a in r)J.call(r,a)&&e.indexOf(a)<0&&(t[a]=r[a]);if(r!=null&&R)for(var a of R(r))e.indexOf(a)<0&&X.call(r,a)&&(t[a]=r[a]);return t};var Tt=(r,e,t)=>{if(!e.has(r))throw TypeError("Cannot "+t)};var Y=(r,e,t)=>{if(e.has(r))throw TypeError("Cannot add the same private member more than once");e instanceof WeakSet?e.add(r):e.set(r,t)};var j=(r,e,t)=>(Tt(r,e,"access private method"),t);export*from"@fuel-ts/transactions";import{hexlify as Ct}from"@ethersproject/bytes";import{NativeAssetId as tt}from"@fuel-ts/constants";var B=r=>{var a,n;let e,t;return Array.isArray(r)?(t=r[0],e=(a=r[1])!=null?a:tt):(t=r.amount,e=(n=r.assetId)!=null?n:tt),{assetId:Ct(e),amount:BigInt(t)}};import c from"graphql-tag";var et=(t=>(t.Spent="SPENT",t.Unspent="UNSPENT",t))(et||{});var G=c`
  fragment transactionFragment on Transaction {
    id
    rawPayload
    status {
      type: __typename
      ... on SubmittedStatus {
        time
      }
      ... on SuccessStatus {
        block {
          id
        }
        time
        programState {
          returnType
          data
        }
      }
      ... on FailureStatus {
        block {
          id
        }
        time
        reason
      }
    }
  }
`,at=c`
  fragment receiptFragment on Receipt {
    data
    rawPayload
  }
`,_=c`
  fragment blockFragment on Block {
    id
    height
    producer
    transactions {
      id
    }
    time
  }
`,U=c`
  fragment coinFragment on Coin {
    utxoId
    owner
    amount
    assetId
    maturity
    status
    blockCreated
  }
`,rt=c`
  fragment balanceFragment on Balance {
    owner
    amount
    assetId
  }
`,Gt=c`
  query getVersion {
    nodeInfo {
      nodeVersion
    }
  }
`,ft=c`
  query getChain {
    chain {
      name
      latestBlock {
        ...blockFragment
      }
      baseChainHeight
      peerCount
    }
  }
  ${_}
`,ht=c`
  query getTransaction($transactionId: TransactionId!) {
    transaction(id: $transactionId) {
      ...transactionFragment
    }
  }
  ${G}
`,Rt=c`
  query getTransactionWithReceipts($transactionId: TransactionId!) {
    transaction(id: $transactionId) {
      ...transactionFragment
      receipts {
        ...receiptFragment
      }
    }
  }
  ${G}
  ${at}
`,Bt=c`
  query getTransactions($after: String, $before: String, $first: Int, $last: Int) {
    transactions(after: $after, before: $before, first: $first, last: $last) {
      edges {
        node {
          ...transactionFragment
        }
      }
    }
  }
  ${G}
`,_t=c`
  query getTransactionsByOwner(
    $owner: Address!
    $after: String
    $before: String
    $first: Int
    $last: Int
  ) {
    transactionsByOwner(owner: $owner, after: $after, before: $before, first: $first, last: $last) {
      edges {
        node {
          ...transactionFragment
        }
      }
    }
  }
  ${G}
`,kt=c`
  query getBlock($blockId: BlockId, $blockHeight: U64) {
    block(id: $blockId, height: $blockHeight) {
      ...blockFragment
    }
  }
  ${_}
`,wt=c`
  query getBlockWithTransactions($blockId: BlockId, $blockHeight: U64) {
    block(id: $blockId, height: $blockHeight) {
      ...blockFragment
      transactions {
        ...transactionFragment
      }
    }
  }
  ${_}
  ${G}
`,Mt=c`
  query getBlocks($after: String, $before: String, $first: Int, $last: Int) {
    blocks(after: $after, before: $before, first: $first, last: $last) {
      edges {
        node {
          ...blockFragment
        }
      }
    }
  }
  ${_}
`,At=c`
  query getCoin($coinId: UtxoId!) {
    coin(utxoId: $coinId) {
      ...coinFragment
    }
  }
  ${U}
`,Qt=c`
  query getCoins(
    $filter: CoinFilterInput!
    $after: String
    $before: String
    $first: Int
    $last: Int
  ) {
    coins(filter: $filter, after: $after, before: $before, first: $first, last: $last) {
      edges {
        node {
          ...coinFragment
        }
      }
    }
  }
  ${U}
`,Dt=c`
  query getCoinsToSpend(
    $owner: Address!
    $spendQuery: [SpendQueryElementInput!]!
    $maxInputs: Int
  ) {
    coinsToSpend(owner: $owner, spendQuery: $spendQuery, maxInputs: $maxInputs) {
      ...coinFragment
    }
  }
  ${U}
`,Pt=c`
  query getContract($contractId: ContractId!) {
    contract(id: $contractId) {
      bytecode
      id
    }
  }
`,Ot=c`
  query getBalance($owner: Address!, $assetId: AssetId!) {
    balance(owner: $owner, assetId: $assetId) {
      ...balanceFragment
    }
  }
  ${rt}
`,Lt=c`
  query getBalances(
    $filter: BalanceFilterInput!
    $after: String
    $before: String
    $first: Int
    $last: Int
  ) {
    balances(filter: $filter, after: $after, before: $before, first: $first, last: $last) {
      edges {
        node {
          ...balanceFragment
        }
      }
    }
  }
  ${rt}
`,$t=c`
  mutation dryRun($encodedTransaction: HexString!, $utxoValidation: Boolean) {
    dryRun(tx: $encodedTransaction, utxoValidation: $utxoValidation) {
      ...receiptFragment
    }
  }
  ${at}
`,Et=c`
  mutation submit($encodedTransaction: HexString!) {
    submit(tx: $encodedTransaction) {
      id
    }
  }
`,Ut=c`
  mutation startSession {
    startSession
  }
`,Ft=c`
  mutation endSession($sessionId: ID!) {
    endSession(id: $sessionId)
  }
`,Vt=c`
  mutation execute($sessionId: ID!, $op: String!) {
    execute(id: $sessionId, op: $op)
  }
`,Nt=c`
  mutation reset($sessionId: ID!) {
    reset(id: $sessionId)
  }
`,Wt=(r,e,t)=>r();function nt(r,e=Wt){return{getVersion(t,a){return e(n=>r.request(Gt,t,s(s({},a),n)),"getVersion","query")},getChain(t,a){return e(n=>r.request(ft,t,s(s({},a),n)),"getChain","query")},getTransaction(t,a){return e(n=>r.request(ht,t,s(s({},a),n)),"getTransaction","query")},getTransactionWithReceipts(t,a){return e(n=>r.request(Rt,t,s(s({},a),n)),"getTransactionWithReceipts","query")},getTransactions(t,a){return e(n=>r.request(Bt,t,s(s({},a),n)),"getTransactions","query")},getTransactionsByOwner(t,a){return e(n=>r.request(_t,t,s(s({},a),n)),"getTransactionsByOwner","query")},getBlock(t,a){return e(n=>r.request(kt,t,s(s({},a),n)),"getBlock","query")},getBlockWithTransactions(t,a){return e(n=>r.request(wt,t,s(s({},a),n)),"getBlockWithTransactions","query")},getBlocks(t,a){return e(n=>r.request(Mt,t,s(s({},a),n)),"getBlocks","query")},getCoin(t,a){return e(n=>r.request(At,t,s(s({},a),n)),"getCoin","query")},getCoins(t,a){return e(n=>r.request(Qt,t,s(s({},a),n)),"getCoins","query")},getCoinsToSpend(t,a){return e(n=>r.request(Dt,t,s(s({},a),n)),"getCoinsToSpend","query")},getContract(t,a){return e(n=>r.request(Pt,t,s(s({},a),n)),"getContract","query")},getBalance(t,a){return e(n=>r.request(Ot,t,s(s({},a),n)),"getBalance","query")},getBalances(t,a){return e(n=>r.request(Lt,t,s(s({},a),n)),"getBalances","query")},dryRun(t,a){return e(n=>r.request($t,t,s(s({},a),n)),"dryRun","mutation")},submit(t,a){return e(n=>r.request(Et,t,s(s({},a),n)),"submit","mutation")},startSession(t,a){return e(n=>r.request(Ut,t,s(s({},a),n)),"startSession","mutation")},endSession(t,a){return e(n=>r.request(Ft,t,s(s({},a),n)),"endSession","mutation")},execute(t,a){return e(n=>r.request(Vt,t,s(s({},a),n)),"execute","mutation")},reset(t,a){return e(n=>r.request(Nt,t,s(s({},a),n)),"reset","mutation")}}}import{arrayify as K,hexlify as S}from"@ethersproject/bytes";import{ReceiptType as mt,ReceiptCoder as te,TransactionCoder as gt}from"@fuel-ts/transactions";import{GraphQLClient as ee}from"graphql-request";import{arrayify as k,hexlify as T}from"@ethersproject/bytes";import{ZeroBytes32 as F}from"@fuel-ts/constants";import{InputType as w}from"@fuel-ts/transactions";var st=r=>{var e,t,a;switch(r.type){case w.Coin:{let n=k((e=r.predicate)!=null?e:"0x"),o=k((t=r.predicateData)!=null?t:"0x");return{type:w.Coin,utxoID:{transactionId:T(k(r.id).slice(0,32)),outputIndex:k(r.id)[32]},owner:T(r.owner),amount:BigInt(r.amount),assetId:T(r.assetId),witnessIndex:r.witnessIndex,maturity:BigInt((a=r.maturity)!=null?a:0),predicateLength:n.length,predicateDataLength:o.length,predicate:T(n),predicateData:T(o)}}case w.Contract:return{type:w.Contract,utxoID:{transactionId:F,outputIndex:0},balanceRoot:F,stateRoot:F,contractID:T(r.contractId)};default:throw new Error("Invalid Input type")}};import{hexlify as q}from"@ethersproject/bytes";import{ZeroBytes32 as M}from"@fuel-ts/constants";import{OutputType as y}from"@fuel-ts/transactions";var ot=r=>{switch(r.type){case y.Coin:return{type:y.Coin,to:q(r.to),amount:BigInt(r.amount),assetId:q(r.assetId)};case y.Contract:return{type:y.Contract,inputIndex:r.inputIndex,balanceRoot:M,stateRoot:M};case y.Withdrawal:return{type:y.Withdrawal,to:q(r.to),amount:BigInt(r.amount),assetId:q(r.assetId)};case y.Change:return{type:y.Change,to:q(r.to),amount:BigInt(0),assetId:q(r.assetId)};case y.Variable:return{type:y.Variable,to:M,amount:BigInt(0),assetId:M};case y.ContractCreated:return{type:y.ContractCreated,contractId:q(r.contractId),stateRoot:q(r.stateRoot)};default:throw new Error("Invalid Output type")}};import{arrayify as f,hexlify as g}from"@ethersproject/bytes";import{NativeAssetId as zt,ZeroBytes32 as V}from"@fuel-ts/constants";import{addressify as A,contractIdify as Jt}from"@fuel-ts/interfaces";import{TransactionType as C,TransactionCoder as Xt,InputType as h,OutputType as d}from"@fuel-ts/transactions";import{hexlify as it,arrayify as Ht}from"@ethersproject/bytes";var vt=r=>{let e=new Uint8Array(32);return e.set(Ht(r)),e},ct=r=>{let e,t;return Array.isArray(r)?(e=r[0],t=r[1]):(e=r.key,t=r.value),{key:it(e),value:it(vt(t))}};import{arrayify as Kt,hexlify as Zt}from"@ethersproject/bytes";var ut=r=>{let e=Kt(r);return{data:Zt(e),dataLength:e.length}};var pt={bytes:f("0x24000000"),encodeScriptData:()=>new Uint8Array(0)},N=class extends Error{constructor(){super(...arguments);this.name="ChangeOutputCollisionError";this.message='A ChangeOutput with the same "assetId" already exists for a different "to" address'}},W=class extends Error{constructor(t){super();this.index=t;this.name="NoWitnessAtIndexError";this.message=`Witness at index "${t}" was not found`}},H=class extends Error{constructor(t){super();this.owner=t;this.name="NoWitnessByOwnerError";this.message=`A witness for the given owner "${t}" was not found`}},Q=class{constructor({gasPrice:e,gasLimit:t,bytePrice:a,maturity:n,inputs:o,outputs:i,witnesses:m}={}){this.inputs=[];this.outputs=[];this.witnesses=[];this.gasPrice=BigInt(e!=null?e:0),this.gasLimit=BigInt(t!=null?t:0),this.bytePrice=BigInt(a!=null?a:0),this.maturity=BigInt(n!=null?n:0),this.inputs=[...o!=null?o:[]],this.outputs=[...i!=null?i:[]],this.witnesses=[...m!=null?m:[]]}getBaseTransaction(){var n,o,i,m,I,x;let e=(o=(n=this.inputs)==null?void 0:n.map(st))!=null?o:[],t=(m=(i=this.outputs)==null?void 0:i.map(ot))!=null?m:[],a=(x=(I=this.witnesses)==null?void 0:I.map(ut))!=null?x:[];return{gasPrice:this.gasPrice,gasLimit:this.gasLimit,bytePrice:this.bytePrice,maturity:this.maturity,inputs:e,outputs:t,witnesses:a,inputsCount:e.length,outputsCount:t.length,witnessesCount:a.length}}toTransactionBytes(){return new Xt().encode(this.toTransaction())}pushInput(e){return this.inputs.push(e),this.inputs.length-1}pushOutput(e){return this.outputs.push(e),this.outputs.length-1}createWitness(){return this.witnesses.push("0x"),this.witnesses.length-1}updateWitness(e,t){if(!this.witnesses[e])throw new W(e);this.witnesses[e]=t}getCoinInputs(){return this.inputs.filter(e=>e.type===h.Coin)}getCoinOutputs(){return this.outputs.filter(e=>e.type===d.Coin)}getChangeOutputs(){return this.outputs.filter(e=>e.type===d.Change)}getCoinInputWitnessIndexByOwner(e){var a,n;let t=A(e);return(n=(a=this.inputs.find(o=>o.type===h.Coin&&g(o.owner)===t))==null?void 0:a.witnessIndex)!=null?n:null}updateWitnessByCoinInputOwner(e,t){let a=this.getCoinInputWitnessIndexByOwner(e);if(!a)throw new H(A(e));this.updateWitness(a,t)}addCoin(e){let t=this.getCoinInputWitnessIndexByOwner(e.owner);typeof t!="number"&&(t=this.createWitness()),this.pushInput(u(s({type:h.Coin},e),{witnessIndex:t}));let a=this.getChangeOutputs().find(n=>g(n.assetId)===e.assetId);if(a&&g(a.to)!==e.owner)throw new N;a||this.pushOutput({type:d.Change,to:e.owner,assetId:e.assetId})}addCoins(e){e.forEach(t=>this.addCoin(t))}addCoinOutput(e,t,a=zt){this.pushOutput({type:d.Coin,to:A(e),amount:t,assetId:a})}addCoinOutputs(e,t){t.map(B).forEach(a=>{this.pushOutput({type:d.Coin,to:A(e),amount:a.amount,assetId:a.assetId})})}calculateFee(){return 1n}},D=class extends Q{constructor(o={}){var i=o,{script:t,scriptData:a}=i,n=E(i,["script","scriptData"]);super(n);this.type=C.Script;this.script=f(t!=null?t:pt.bytes),this.scriptData=f(a!=null?a:pt.encodeScriptData())}static from(t){return t instanceof this?t:new this(t)}toTransaction(){var n,o;let t=f((n=this.script)!=null?n:"0x"),a=f((o=this.scriptData)!=null?o:"0x");return u(s({type:C.Script},super.getBaseTransaction()),{scriptLength:t.length,scriptDataLength:a.length,receiptsRoot:V,script:g(t),scriptData:g(a)})}getContractInputs(){return this.inputs.filter(t=>t.type===h.Contract)}getContractOutputs(){return this.outputs.filter(t=>t.type===d.Contract)}getVariableOutputs(){return this.outputs.filter(t=>t.type===d.Variable)}setScript(t,a){this.script=t.bytes,this.scriptData=t.encodeScriptData(a)}addVariableOutputs(t=1){let a=t;for(;a;)this.pushOutput({type:d.Variable}),a-=1;return this.outputs.length-1}addContract(t){let a=super.pushInput({type:h.Contract,contractId:Jt(t)});this.pushOutput({type:d.Contract,inputIndex:a})}},P=class extends Q{constructor(m={}){var I=m,{bytecodeWitnessIndex:t,salt:a,staticContracts:n,storageSlots:o}=I,i=E(I,["bytecodeWitnessIndex","salt","staticContracts","storageSlots"]);var x;super(i);this.type=C.Create;this.bytecodeWitnessIndex=t!=null?t:0,this.salt=g(a!=null?a:V),this.staticContracts=[...(x=n==null?void 0:n.map(It=>g(It)))!=null?x:[]],this.storageSlots=[...o!=null?o:[]]}static from(t){return t instanceof this?t:new this(t)}toTransaction(){var i,m,I;let t=this.getBaseTransaction(),a=this.bytecodeWitnessIndex,n=(i=this.staticContracts)!=null?i:[],o=(I=(m=this.storageSlots)==null?void 0:m.map(ct))!=null?I:[];return u(s({type:C.Create},t),{bytecodeLength:t.witnesses[a].dataLength/4,bytecodeWitnessIndex:a,staticContractsCount:n.length,storageSlotsCount:o.length,salt:this.salt?g(this.salt):V,staticContracts:n.map(x=>g(x)),storageSlots:o})}getContractCreatedOutputs(){return this.outputs.filter(t=>t.type===d.ContractCreated)}addContractCreatedOutput(t,a){this.pushOutput({type:d.ContractCreated,contractId:t,stateRoot:a})}},v=r=>{if(r instanceof D||r instanceof P)return r;switch(r.type){case C.Script:return D.from(r);case C.Create:return P.from(r);default:throw new Error(`Unknown transaction type: ${r.type}`)}};import{arrayify as Yt}from"@ethersproject/bytes";import{ReceiptType as lt,ReceiptCoder as jt}from"@fuel-ts/transactions";var yt=r=>{let e=new jt().decode(Yt(r.rawPayload),0)[0];switch(e.type){case lt.ReturnData:return u(s({},e),{data:r.data});case lt.LogData:return u(s({},e),{data:r.data});default:return e}},L,dt,O=class{constructor(e,t,a){Y(this,L);this.id=e,this.request=t,this.provider=a}async waitForResult(){var t;let e=await j(this,L,dt).call(this);switch((t=e.status)==null?void 0:t.type){case"SubmittedStatus":throw new Error("Not yet implemented");case"FailureStatus":return{status:{type:"failure",reason:e.status.reason},receipts:e.receipts.map(yt),transactionId:this.id,blockId:e.status.block.id,time:e.status.time};case"SuccessStatus":return{status:{type:"success",programState:e.status.programState},receipts:e.receipts.map(yt),transactionId:this.id,blockId:e.status.block.id,time:e.status.time};default:throw new Error("Invalid Transaction status")}}async wait(){let e=await this.waitForResult();if(e.status.type==="failure")throw new Error(`Transaction failed: ${e.status.reason}`);return e}};L=new WeakSet,dt=async function(){let{transaction:e}=await this.provider.operations.getTransactionWithReceipts({transactionId:this.id});if(!e)throw new Error("No Transaction was received from the client.");return e};var ae=r=>{let e=new te().decode(K(r.rawPayload),0)[0];switch(e.type){case mt.ReturnData:return u(s({},e),{data:r.data});case mt.LogData:return u(s({},e),{data:r.data});default:return e}},$=class{constructor(e){this.url=e;let t=new ee(e);this.operations=nt(t)}async getVersion(){let{nodeInfo:{nodeVersion:e}}=await this.operations.getVersion();return e}async getNetwork(){return{name:"fuelv2",chainId:3735928559}}async getBlockNumber(){let{chain:e}=await this.operations.getChain();return BigInt(e.latestBlock.height)}async sendTransaction(e){let t=v(e),a=S(t.toTransactionBytes()),{submit:{id:n}}=await this.operations.submit({encodedTransaction:a});return new O(n,t,this)}async call(e,{utxoValidation:t}={}){let a=v(e),n=S(a.toTransactionBytes()),{dryRun:o}=await this.operations.dryRun({encodedTransaction:n,utxoValidation:t||!1});return{receipts:o.map(ae)}}async getCoins(e,t,a){return(await this.operations.getCoins(u(s({first:10},a),{filter:{owner:S(e),assetId:t&&S(t)}}))).coins.edges.map(i=>i.node).map(i=>({id:i.utxoId,assetId:i.assetId,amount:BigInt(i.amount),owner:i.owner,status:i.status,maturity:BigInt(i.maturity),blockCreated:BigInt(i.blockCreated)}))}async getCoinsToSpend(e,t,a){return(await this.operations.getCoinsToSpend({owner:S(e),spendQuery:t.map(B).map(i=>({assetId:S(i.assetId),amount:i.amount.toString()})),maxInputs:a})).coinsToSpend.map(i=>({id:i.utxoId,status:i.status,assetId:i.assetId,amount:BigInt(i.amount),owner:i.owner,maturity:BigInt(i.maturity),blockCreated:BigInt(i.blockCreated)}))}async getBlock(e){let t;typeof e=="number"?t={blockHeight:BigInt(e).toString()}:e==="latest"?t={blockHeight:(await this.getBlockNumber()).toString()}:t={blockId:e};let{block:a}=await this.operations.getBlock(t);return a?{id:a.id,height:BigInt(a.height),time:a.time,producer:a.producer,transactionIds:a.transactions.map(n=>n.id)}:null}async getBlockWithTransactions(e){let t;typeof e=="number"?t={blockHeight:BigInt(e).toString()}:e==="latest"?t={blockHeight:(await this.getBlockNumber()).toString()}:t={blockId:e};let{block:a}=await this.operations.getBlockWithTransactions(t);return a?{id:a.id,height:BigInt(a.height),time:a.time,producer:a.producer,transactionIds:a.transactions.map(n=>n.id),transactions:a.transactions.map(n=>{var o;return(o=new gt().decode(K(n.rawPayload),0))==null?void 0:o[0]})}:null}async getTransaction(e){var a;let{transaction:t}=await this.operations.getTransaction({transactionId:e});return t?(a=new gt().decode(K(t.rawPayload),0))==null?void 0:a[0]:null}async getContract(e){let{contract:t}=await this.operations.getContract({contractId:e});return t||null}async getBalance(e,t){let{balance:a}=await this.operations.getBalance({owner:S(e),assetId:S(t)});return BigInt(a.amount)}async getBalances(e,t){return(await this.operations.getBalances(u(s({first:10},t),{filter:{owner:S(e)}}))).balances.edges.map(o=>o.node).map(o=>({assetId:o.assetId,amount:BigInt(o.amount)}))}};import{sha256 as re}from"@ethersproject/sha2";import{ZeroBytes32 as b}from"@fuel-ts/constants";import{InputType as ne,OutputType as Z,TransactionType as St,TransactionCoder as se}from"@fuel-ts/transactions";var oe=r=>{let e=s({},r);switch(e.type){case St.Script:{e.receiptsRoot=b;break}case St.Create:break;default:throw new Error("Not implemented")}return e.inputs=e.inputs.map(t=>t.type===ne.Contract?u(s({},t),{utxoID:{transactionId:b,outputIndex:0},balanceRoot:b,stateRoot:b}):t),e.outputs=e.outputs.map(t=>{switch(t.type){case Z.Contract:return u(s({},t),{balanceRoot:b,stateRoot:b});case Z.Change:return u(s({},t),{amount:0n});case Z.Variable:return u(s({},t),{to:b,amount:0n,assetId:b});default:return t}}),e},ra=r=>{let e=oe(r),t=new se().encode(e);return re(t)};export{N as ChangeOutputCollisionError,et as CoinStatus,P as CreateTransactionRequest,W as NoWitnessAtIndexError,H as NoWitnessByOwnerError,$ as Provider,D as ScriptTransactionRequest,O as TransactionResponse,C as TransactionType,B as coinQuantityfy,oe as getSignableTransaction,ra as getTransactionId,st as inputify,ot as outputify,pt as returnZeroScript,v as transactionRequestify};
//# sourceMappingURL=index.mjs.map