{"version":3,"sources":["../src/common.ts","../src/cryptography.ts"],"sourcesContent":["/// @dev The Fuel testing Merkle trees.\n/// A set of useful helper methods for testing and deploying Merkle trees.\nimport { toHex } from '@fuel-ts/math';\n\nexport const EMPTY = '0xe3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855';\nexport const ZERO = '0x0000000000000000000000000000000000000000000000000000000000000000';\nexport const MAX_HEIGHT = 256;\n\n/**\n * Convert integer to 32 bytes hex string\n */\nexport function uintToBytes32(i: number): string {\n  const value = toHex(i);\n  let trimmedValue = value.slice(2);\n  trimmedValue = '0'.repeat(64 - trimmedValue.length).concat(trimmedValue);\n  return '0x'.concat(trimmedValue);\n}\n\n/**\n * Pad an uint left side to be 32 bytes\n */\nexport function padUint(value: bigint): string {\n  // uint256 is encoded as 32 bytes, so pad that string.\n  let trimmedValue = toHex(value).slice(2);\n  trimmedValue = '0'.repeat(64 - trimmedValue.length).concat(trimmedValue);\n  return '0x'.concat(trimmedValue);\n}\n","import type { BytesLike } from '@ethersproject/bytes';\nimport { sha256 } from '@ethersproject/sha2';\n\n/**\n * The primary hash function for Fuel\n * SHA-256\n */\nexport function hash(data: BytesLike): string {\n  return sha256(data);\n}\n"],"mappings":"AAEA,sCAEO,GAAM,GAAQ,qEACR,EAAO,qEACP,EAAa,IAKnB,WAAuB,EAAmB,CAE/C,GAAI,GAAe,AADL,EAAM,CAAC,EACI,MAAM,CAAC,EAChC,SAAe,IAAI,OAAO,GAAK,EAAa,MAAM,EAAE,OAAO,CAAY,EAChE,KAAK,OAAO,CAAY,CACjC,CAKO,WAAiB,EAAuB,CAE7C,GAAI,GAAe,EAAM,CAAK,EAAE,MAAM,CAAC,EACvC,SAAe,IAAI,OAAO,GAAK,EAAa,MAAM,EAAE,OAAO,CAAY,EAChE,KAAK,OAAO,CAAY,CACjC,CCzBA,6CAMO,WAAc,EAAyB,CAC5C,MAAO,GAAO,CAAI,CACpB","names":[]}