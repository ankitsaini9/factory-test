{"version":3,"sources":["../src/index.ts","../src/hasher.ts"],"sourcesContent":["export * from './hasher';\n","import type { BytesLike } from '@ethersproject/bytes';\nimport { sha256 } from '@ethersproject/sha2';\nimport { ZeroBytes32 } from '@fuel-ts/constants';\nimport type { TransactionRequestLike, UtxoId } from '@fuel-ts/providers';\nimport {\n  transactionRequestify,\n  OutputType,\n  InputType,\n  TransactionCoder,\n  TransactionType,\n} from '@fuel-ts/providers';\nimport cloneDeep from 'lodash.clonedeep';\n\n/**\n * hash string messages with sha256\n *\n * @param msg - The string message to be hashed\n * @returns A sha256 hash of the message\n */\nexport function hashMessage(msg: string) {\n  return sha256(Buffer.from(msg));\n}\n\n/**\n * Hash transaction request with sha256. [Read more](https://github.com/FuelLabs/fuel-specs/blob/master/specs/protocol/identifiers.md#transaction-id)\n *\n * @param transactionRequest - Transaction request to be hashed\n * @returns sha256 hash of the transaction\n */\nexport function hashTransaction(transactionRequestLike: TransactionRequestLike) {\n  const transactionRequest = transactionRequestify(transactionRequestLike);\n  // Return a new transaction object without references to the original transaction request\n  const transaction = transactionRequest.toTransaction();\n\n  if (transaction.type === TransactionType.Script) {\n    transaction.receiptsRoot = ZeroBytes32;\n  }\n\n  // Zero out input fields\n  transaction.inputs = transaction.inputs.map((input) => {\n    const inputClone = cloneDeep(input);\n\n    switch (inputClone.type) {\n      // Zero out on signing: txoPointer\n      case InputType.Coin: {\n        // inputClone.txoPointer = 0;\n        return inputClone;\n      }\n      // Zero out on signing: txID, outputIndex, balanceRoot, stateRoot, and txoPointer\n      case InputType.Contract: {\n        // inputClone.txoPointer;\n        inputClone.utxoID = <UtxoId>{\n          transactionId: ZeroBytes32,\n          outputIndex: 0,\n        };\n        inputClone.balanceRoot = ZeroBytes32;\n        inputClone.stateRoot = ZeroBytes32;\n        return inputClone;\n      }\n      default:\n        return inputClone;\n    }\n  });\n  // Zero out output fields\n  transaction.outputs = transaction.outputs.map((output) => {\n    const outputClone = cloneDeep(output);\n\n    switch (outputClone.type) {\n      // Zero out on signing: balanceRoot, stateRoot\n      case OutputType.Contract: {\n        outputClone.balanceRoot = ZeroBytes32;\n        outputClone.stateRoot = ZeroBytes32;\n        return outputClone;\n      }\n      // Zero out on signing: amount\n      case OutputType.Change: {\n        outputClone.amount = 0n;\n        return outputClone;\n      }\n      // Zero out on signing: amount, to and assetId\n      case OutputType.Variable: {\n        outputClone.to = ZeroBytes32;\n        outputClone.amount = 0n;\n        outputClone.assetId = ZeroBytes32;\n        return outputClone;\n      }\n      default:\n        return outputClone;\n    }\n  });\n  transaction.witnessesCount = 0;\n  transaction.witnesses = [];\n\n  return sha256(new TransactionCoder().encode(transaction));\n}\n\n/**\n * wrap sha256\n *\n * @param data - The data to be hash\n * @returns A sha256 hash of the data\n */\nexport function hash(data: BytesLike) {\n  return sha256(data);\n}\n"],"mappings":"6iBAAA,uFCCA,MAAuB,+BACvB,EAA4B,8BAE5B,EAMO,8BACP,EAAsB,+BAQf,WAAqB,EAAa,CACvC,MAAO,aAAO,OAAO,KAAK,CAAG,CAAC,CAChC,CAQO,WAAyB,EAAgD,CAG9E,GAAM,GAAc,AAFO,4BAAsB,CAAsB,EAEhC,cAAc,EAErD,MAAI,GAAY,OAAS,kBAAgB,QACvC,GAAY,aAAe,eAI7B,EAAY,OAAS,EAAY,OAAO,IAAI,AAAC,GAAU,CACrD,GAAM,GAAa,cAAU,CAAK,EAElC,OAAQ,EAAW,UAEZ,aAAU,KAEb,MAAO,OAGJ,aAAU,SAEb,SAAW,OAAiB,CAC1B,cAAe,cACf,YAAa,CACf,EACA,EAAW,YAAc,cACzB,EAAW,UAAY,cAChB,UAGP,MAAO,GAEb,CAAC,EAED,EAAY,QAAU,EAAY,QAAQ,IAAI,AAAC,GAAW,CACxD,GAAM,GAAc,cAAU,CAAM,EAEpC,OAAQ,EAAY,UAEb,cAAW,SACd,SAAY,YAAc,cAC1B,EAAY,UAAY,cACjB,MAGJ,cAAW,OACd,SAAY,OAAS,GACd,MAGJ,cAAW,SACd,SAAY,GAAK,cACjB,EAAY,OAAS,GACrB,EAAY,QAAU,cACf,UAGP,MAAO,GAEb,CAAC,EACD,EAAY,eAAiB,EAC7B,EAAY,UAAY,CAAC,EAElB,aAAO,GAAI,oBAAiB,EAAE,OAAO,CAAW,CAAC,CAC1D,CAQO,WAAc,EAAiB,CACpC,MAAO,aAAO,CAAI,CACpB","names":[]}